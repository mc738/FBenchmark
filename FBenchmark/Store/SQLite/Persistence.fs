//----------------------------------------------------------------------------------- 
// <auto-generated>                                                                   
//     This code was generated via Freql.Tools (https://github.com/mc738/Freql).      
//                                                                                    
//     Manual changes to this file may cause unexpected behavior in your application. 
//     Manual changes to this file will be overwritten if the code is regenerated.    
// </auto-generated>                                                                  
//----------------------------------------------------------------------------------- 

namespace FBenchmark.Store.SQLite.Persistence

open System
open System.Text.Json.Serialization
open Freql.Core.Common
open Freql.Sqlite

module private Utils =

    open System.Text.RegularExpressions

    let updateCheckIfExists (update: bool) (name: string) (value: string) =
        match update with
        | false -> value
        | true ->
            let regex = Regex($"CREATE {name}")

            regex.Replace(value, $"CREATE {name} IF NOT EXISTS", 1)

/// <summary>
/// Records representing database bindings for `records`.
/// </summary>
/// <remarks>
/// Module generated on 20/10/2024 20:40:58 (utc) via Freql.Tools.
/// </remarks>
[<RequireQualifiedAccess>]
module Records =
    /// <summary>
    /// A record representing a row in the table `artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type ArtifactMetadataItem =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE artifact_metadata
(
    artifact_id TEXT not null
        constraint artifact_metadata_artifacts_id_fk
            references artifacts,
    item_key    TEXT not null,
    item_value  TEXT not null,
    constraint artifact_metadata_pk
        primary key (artifact_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              artifact_metadata.`artifact_id`,
              artifact_metadata.`item_key`,
              artifact_metadata.`item_value`
        FROM artifact_metadata
        """
    
        static member TableName() = "artifact_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ArtifactMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ArtifactMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ArtifactMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type Artifact =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("runId")>] RunId: string option
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("artifactType")>] ArtifactType: string
          [<JsonPropertyName("artifactBlob")>] ArtifactBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = None
              RunId = None
              Name = String.Empty
              ArtifactType = String.Empty
              ArtifactBlob = BlobField.Empty()
              Hash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE artifacts
(
    id            TEXT
        constraint artifacts_pk
            primary key,
    run_id        TEXT
        constraint artifacts_runs_id_fk
            references runs,
    name          TEXT not null,
    artifact_type TEXT not null,
    artifact_blob BLOB not null,
    hash          TEXT not null,
    created_on    TEXT not null,
    constraint artifacts_uk
        unique (run_id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              artifacts.`id`,
              artifacts.`run_id`,
              artifacts.`name`,
              artifacts.`artifact_type`,
              artifacts.`artifact_blob`,
              artifacts.`hash`,
              artifacts.`created_on`
        FROM artifacts
        """
    
        static member TableName() = "artifacts"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Artifact.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Artifact.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Artifact.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_build_info`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type BenchmarkBuildInfo =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("benchmarkId")>] BenchmarkId: string
          [<JsonPropertyName("architecture")>] Architecture: string
          [<JsonPropertyName("configuration")>] Configuration: string
          [<JsonPropertyName("chronometerFrequency")>] ChronometerFrequency: string
          [<JsonPropertyName("chronometerResolutionNanoSeconds")>] ChronometerResolutionNanoSeconds: decimal
          [<JsonPropertyName("chronometerResolutionUnit")>] ChronometerResolutionUnit: string
          [<JsonPropertyName("inDocker")>] InDocker: int64
          [<JsonPropertyName("jitInfo")>] JitInfo: string
          [<JsonPropertyName("osVersion")>] OsVersion: string
          [<JsonPropertyName("runtimeVersion")>] RuntimeVersion: string
          [<JsonPropertyName("hardwareIntrinsicsShort")>] HardwareIntrinsicsShort: string
          [<JsonPropertyName("hardwareTimerKind")>] HardwareTimerKind: string
          [<JsonPropertyName("hasRyuJit")>] HasRyuJit: bool
          [<JsonPropertyName("isMonoInstalled")>] IsMonoInstalled: bool
          [<JsonPropertyName("virtualMachineHypervisor")>] VirtualMachineHypervisor: string
          [<JsonPropertyName("benchmarkDotNetVersion")>] BenchmarkDotNetVersion: string
          [<JsonPropertyName("dotNetSdkVersion")>] DotNetSdkVersion: string
          [<JsonPropertyName("gcAllocationQuantum")>] GcAllocationQuantum: int64
          [<JsonPropertyName("isConcurrentGc")>] IsConcurrentGc: bool
          [<JsonPropertyName("isServerGc")>] IsServerGc: bool
          [<JsonPropertyName("cpuMaxFrequencyHz")>] CpuMaxFrequencyHz: decimal option
          [<JsonPropertyName("cpuMinFrequencyHz")>] CpuMinFrequencyHz: decimal option
          [<JsonPropertyName("cpuNominalFrequencyHz")>] CpuNominalFrequencyHz: decimal option
          [<JsonPropertyName("cpuProcessorName")>] CpuProcessorName: string
          [<JsonPropertyName("cpuLogicalCoreCount")>] CpuLogicalCoreCount: int64 option
          [<JsonPropertyName("cpuPhysicalCoreCount")>] CpuPhysicalCoreCount: int64 option
          [<JsonPropertyName("cpuPhysicalProcessorCount")>] CpuPhysicalProcessorCount: int64 option }
    
        static member Blank() =
            { Id = String.Empty
              BenchmarkId = String.Empty
              Architecture = String.Empty
              Configuration = String.Empty
              ChronometerFrequency = String.Empty
              ChronometerResolutionNanoSeconds = 0m
              ChronometerResolutionUnit = String.Empty
              InDocker = 0L
              JitInfo = String.Empty
              OsVersion = String.Empty
              RuntimeVersion = String.Empty
              HardwareIntrinsicsShort = String.Empty
              HardwareTimerKind = String.Empty
              HasRyuJit = true
              IsMonoInstalled = true
              VirtualMachineHypervisor = String.Empty
              BenchmarkDotNetVersion = String.Empty
              DotNetSdkVersion = String.Empty
              GcAllocationQuantum = 0L
              IsConcurrentGc = true
              IsServerGc = true
              CpuMaxFrequencyHz = None
              CpuMinFrequencyHz = None
              CpuNominalFrequencyHz = None
              CpuProcessorName = String.Empty
              CpuLogicalCoreCount = None
              CpuPhysicalCoreCount = None
              CpuPhysicalProcessorCount = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "benchmark_build_info"
(
    id                                  TEXT    not null
        constraint benchmark_build_info_pk
            primary key,
    benchmark_id                        TEXT    not null
        constraint benchmark_build_info_benchmarks_id_fk
            references benchmarks,
    architecture                        TEXT    not null,
    configuration                       TEXT    not null,
    chronometer_frequency               TEXT    not null,
    chronometer_resolution_nano_seconds REAL    not null,
    chronometer_resolution_unit         TEXT    not null,
    in_docker                           INTEGER not null,
    jit_info                            TEXT    not null,
    os_version                          TEXT    not null,
    runtime_version                     TEXT    not null,
    hardware_intrinsics_short           TEXT    not null,
    hardware_timer_kind                 TEXT    not null,
    has_ryu_jit                         INTEGER not null,
    is_mono_installed                   INTEGER not null,
    virtual_machine_hypervisor          TEXT    not null,
    benchmark_dot_net_version           TEXT    not null,
    dot_net_sdk_version                 TEXT    not null,
    gc_allocation_quantum               INTEGER not null,
    is_concurrent_gc                    INTEGER not null,
    is_server_gc                        INTEGER not null,
    cpu_max_frequency_hz                REAL,
    cpu_min_frequency_hz                REAL,
    cpu_nominal_frequency_hz            REAL,
    cpu_processor_name                  TEXT    not null,
    cpu_logical_core_count              INTEGER,
    cpu_physical_core_count             INTEGER,
    cpu_physical_processor_count        integer
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_build_info.`id`,
              benchmark_build_info.`benchmark_id`,
              benchmark_build_info.`architecture`,
              benchmark_build_info.`configuration`,
              benchmark_build_info.`chronometer_frequency`,
              benchmark_build_info.`chronometer_resolution_nano_seconds`,
              benchmark_build_info.`chronometer_resolution_unit`,
              benchmark_build_info.`in_docker`,
              benchmark_build_info.`jit_info`,
              benchmark_build_info.`os_version`,
              benchmark_build_info.`runtime_version`,
              benchmark_build_info.`hardware_intrinsics_short`,
              benchmark_build_info.`hardware_timer_kind`,
              benchmark_build_info.`has_ryu_jit`,
              benchmark_build_info.`is_mono_installed`,
              benchmark_build_info.`virtual_machine_hypervisor`,
              benchmark_build_info.`benchmark_dot_net_version`,
              benchmark_build_info.`dot_net_sdk_version`,
              benchmark_build_info.`gc_allocation_quantum`,
              benchmark_build_info.`is_concurrent_gc`,
              benchmark_build_info.`is_server_gc`,
              benchmark_build_info.`cpu_max_frequency_hz`,
              benchmark_build_info.`cpu_min_frequency_hz`,
              benchmark_build_info.`cpu_nominal_frequency_hz`,
              benchmark_build_info.`cpu_processor_name`,
              benchmark_build_info.`cpu_logical_core_count`,
              benchmark_build_info.`cpu_physical_core_count`,
              benchmark_build_info.`cpu_physical_processor_count`
        FROM benchmark_build_info
        """
    
        static member TableName() = "benchmark_build_info"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkBuildInfo.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkBuildInfo.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkBuildInfo.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_build_info_antivirus_installions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type BenchmarkBuildInfoAntivirusInstallions =
        { [<JsonPropertyName("buildInfoId")>] BuildInfoId: string
          [<JsonPropertyName("details")>] Details: string }
    
        static member Blank() =
            { BuildInfoId = String.Empty
              Details = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE benchmark_build_info_antivirus_installions
(
    build_info_id TEXT not null
        constraint benchmark_build_info_antivirus_installions_benchmark_build_info_id_fk
            references benchmark_build_info,
    details       TEXT not null,
    constraint benchmark_build_info_antivirus_installions_pk
        primary key (build_info_id, details)
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_build_info_antivirus_installions.`build_info_id`,
              benchmark_build_info_antivirus_installions.`details`
        FROM benchmark_build_info_antivirus_installions
        """
    
        static member TableName() = "benchmark_build_info_antivirus_installions"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkBuildInfoAntivirusInstallions.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkBuildInfoAntivirusInstallions.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkBuildInfoAntivirusInstallions.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_case_descriptors`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type BenchmarkCaseDescriptors =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("additionalLogic")>] AdditionalLogic: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("methodIndex")>] MethodIndex: int64 option
          [<JsonPropertyName("globalCleanupMethodId")>] GlobalCleanupMethodId: string option
          [<JsonPropertyName("globalSetupMethodId")>] GlobalSetupMethodId: string option
          [<JsonPropertyName("iterationCleanupMethodId")>] IterationCleanupMethodId: string option
          [<JsonPropertyName("iterationSetupMethodId")>] IterationSetupMethodId: string option
          [<JsonPropertyName("operationsPerInvoke")>] OperationsPerInvoke: int64
          [<JsonPropertyName("workloadMethodDisplayInfo")>] WorkloadMethodDisplayInfo: string }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              AdditionalLogic = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              MethodIndex = None
              GlobalCleanupMethodId = None
              GlobalSetupMethodId = None
              IterationCleanupMethodId = None
              IterationSetupMethodId = None
              OperationsPerInvoke = 0L
              WorkloadMethodDisplayInfo = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "benchmark_case_descriptors"
(
    id                           TEXT    not null
        constraint benchmark_case_descriptors_pk
            primary key,
    case_id                      TEXT    not null
        constraint benchmark_case_descriptors_benchmark_cases_id_fk
            references benchmark_cases,
    additional_logic             TEXT    not null,
    display_info                 TEXT    not null,
    folder_info                  TEXT    not null,
    method_index                 integer,
    global_cleanup_method_id     TEXT
        constraint benchmark_case_descriptors_method_info_id_fk
            references method_info,
    global_setup_method_id       TEXT
        constraint benchmark_case_descriptors_method_info_id_fk_2
            references method_info,
    iteration_cleanup_method_id  TEXT
        constraint benchmark_case_descriptors_method_info_id_fk_3
            references method_info,
    iteration_setup_method_id    TEXT
        constraint benchmark_case_descriptors_method_info_id_fk_4
            references method_info,
    operations_per_invoke        INTEGER not null,
    workload_method_display_info TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_case_descriptors.`id`,
              benchmark_case_descriptors.`case_id`,
              benchmark_case_descriptors.`additional_logic`,
              benchmark_case_descriptors.`display_info`,
              benchmark_case_descriptors.`folder_info`,
              benchmark_case_descriptors.`method_index`,
              benchmark_case_descriptors.`global_cleanup_method_id`,
              benchmark_case_descriptors.`global_setup_method_id`,
              benchmark_case_descriptors.`iteration_cleanup_method_id`,
              benchmark_case_descriptors.`iteration_setup_method_id`,
              benchmark_case_descriptors.`operations_per_invoke`,
              benchmark_case_descriptors.`workload_method_display_info`
        FROM benchmark_case_descriptors
        """
    
        static member TableName() = "benchmark_case_descriptors"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkCaseDescriptors.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkCaseDescriptors.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkCaseDescriptors.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_cases`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type BenchmarkCases =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("benchmarkId")>] BenchmarkId: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("hasArguments")>] HasArguments: bool
          [<JsonPropertyName("hasParameters")>] HasParameters: bool
          [<JsonPropertyName("parametersCount")>] ParametersCount: int64
          [<JsonPropertyName("parametersDisplayInfo")>] ParametersDisplayInfo: string
          [<JsonPropertyName("parametersFolderInfo")>] ParametersFolderInfo: string
          [<JsonPropertyName("parametersPrintInfo")>] ParametersPrintInfo: string
          [<JsonPropertyName("parametersValueInfo")>] ParametersValueInfo: string }
    
        static member Blank() =
            { Id = String.Empty
              BenchmarkId = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              HasArguments = true
              HasParameters = true
              ParametersCount = 0L
              ParametersDisplayInfo = String.Empty
              ParametersFolderInfo = String.Empty
              ParametersPrintInfo = String.Empty
              ParametersValueInfo = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE benchmark_cases
(
    id             TEXT    not null
        constraint benchmark_cases_pk
            primary key,
    benchmark_id   TEXT    not null
        constraint benchmark_cases_benchmarks_id_fk
            references benchmarks,
    display_info   TEXT    not null,
    folder_info    TEXT    not null,
    has_arguments  INTEGER not null,
    has_parameters INTEGER not null
, parameters_count INTEGER not null, parameters_display_info TEXT not null, parameters_folder_info TEXT not null, parameters_print_info TEXT not null, parameters_value_info TEXT not null)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_cases.`id`,
              benchmark_cases.`benchmark_id`,
              benchmark_cases.`display_info`,
              benchmark_cases.`folder_info`,
              benchmark_cases.`has_arguments`,
              benchmark_cases.`has_parameters`,
              benchmark_cases.`parameters_count`,
              benchmark_cases.`parameters_display_info`,
              benchmark_cases.`parameters_folder_info`,
              benchmark_cases.`parameters_print_info`,
              benchmark_cases.`parameters_value_info`
        FROM benchmark_cases
        """
    
        static member TableName() = "benchmark_cases"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkCases.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkCases.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkCases.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_jobs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type BenchmarkJobs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("resolveId")>] ResolveId: string }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              Frozen = 0L
              JobId = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              HasChanges = true
              ResolveId = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE benchmark_jobs
(
    id           TEXT    not null
        constraint benchmark_jobs_pk
            primary key,
    case_id      TEXT    not null
        constraint benchmark_jobs_benchmark_cases_id_fk
            references benchmark_cases,
    frozen       INTEGER not null,
    job_id       TEXT    not null,
    display_info TEXT    not null,
    folder_info  TEXT    not null,
    has_changes  INTEGER not null,
    resolve_id   TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_jobs.`id`,
              benchmark_jobs.`case_id`,
              benchmark_jobs.`frozen`,
              benchmark_jobs.`job_id`,
              benchmark_jobs.`display_info`,
              benchmark_jobs.`folder_info`,
              benchmark_jobs.`has_changes`,
              benchmark_jobs.`resolve_id`
        FROM benchmark_jobs
        """
    
        static member TableName() = "benchmark_jobs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkJobs.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkJobs.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkJobs.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmarks`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type Benchmark =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("sourceId")>] SourceId: string
          [<JsonPropertyName("title")>] Title: string
          [<JsonPropertyName("allRuntimes")>] AllRuntimes: string
          [<JsonPropertyName("totalTime")>] TotalTime: string
          [<JsonPropertyName("isMultipleRuntimes")>] IsMultipleRuntimes: bool
          [<JsonPropertyName("logFilePath")>] LogFilePath: string
          [<JsonPropertyName("resultsDirectoryPath")>] ResultsDirectoryPath: string
          [<JsonPropertyName("hasCriticalValidationErrors")>] HasCriticalValidationErrors: bool }
    
        static member Blank() =
            { Id = String.Empty
              SourceId = String.Empty
              Title = String.Empty
              AllRuntimes = String.Empty
              TotalTime = String.Empty
              IsMultipleRuntimes = true
              LogFilePath = String.Empty
              ResultsDirectoryPath = String.Empty
              HasCriticalValidationErrors = true }
    
        static member CreateTableSql() = """
        CREATE TABLE benchmarks
(
    id                             TEXT    not null
        constraint benchmarks_pk
            primary key,
    source_id                      TEXT    not null
        constraint benchmarks_sources_id_fk
            references sources,
    title                          TEXT    not null,
    all_runtimes                   TEXT    not null,
    total_time                     TEXT    not null,
    is_multiple_runtimes           integer not null,
    log_file_path                  TEXT    not null,
    results_directory_path         TEXT    not null,
    has_critical_validation_errors integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmarks.`id`,
              benchmarks.`source_id`,
              benchmarks.`title`,
              benchmarks.`all_runtimes`,
              benchmarks.`total_time`,
              benchmarks.`is_multiple_runtimes`,
              benchmarks.`log_file_path`,
              benchmarks.`results_directory_path`,
              benchmarks.`has_critical_validation_errors`
        FROM benchmarks
        """
    
        static member TableName() = "benchmarks"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Benchmark.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Benchmark.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Benchmark.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `environment_gcs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type EnvironmentGcs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("concurrent")>] Concurrent: int64
          [<JsonPropertyName("force")>] Force: int64
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("gcId")>] GcId: string
          [<JsonPropertyName("server")>] Server: int64
          [<JsonPropertyName("cpuGroups")>] CpuGroups: int64
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("heapCount")>] HeapCount: int64
          [<JsonPropertyName("noAffinitize")>] NoAffinitize: int64
          [<JsonPropertyName("retainVm")>] RetainVm: int64
          [<JsonPropertyName("heapAffinitizeMask")>] HeapAffinitizeMask: int64
          [<JsonPropertyName("allowVeryLargeObjects")>] AllowVeryLargeObjects: int64 }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentId = String.Empty
              Concurrent = 0L
              Force = 0L
              Frozen = 0L
              GcId = String.Empty
              Server = 0L
              CpuGroups = 0L
              HasChanges = true
              HeapCount = 0L
              NoAffinitize = 0L
              RetainVm = 0L
              HeapAffinitizeMask = 0L
              AllowVeryLargeObjects = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE environment_gcs
(
    id                       TEXT    not null
        constraint environment_gcs_pk
            primary key,
    environment_id           TEXT    not null
        constraint environment_gcs_job_environments_id_fk
            references job_environments,
    concurrent               INTEGER not null,
    force                    INTEGER not null,
    frozen                   INTEGER not null,
    gc_id                    TEXT    not null,
    server                   INTEGER not null,
    cpu_groups               INTEGER not null,
    has_changes              INTEGER not null,
    heap_count               INTEGER not null,
    no_affinitize            integer not null,
    retain_vm                INTEGER not null,
    heap_affinitize_mask     INTEGER not null,
    allow_very_large_objects INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              environment_gcs.`id`,
              environment_gcs.`environment_id`,
              environment_gcs.`concurrent`,
              environment_gcs.`force`,
              environment_gcs.`frozen`,
              environment_gcs.`gc_id`,
              environment_gcs.`server`,
              environment_gcs.`cpu_groups`,
              environment_gcs.`has_changes`,
              environment_gcs.`heap_count`,
              environment_gcs.`no_affinitize`,
              environment_gcs.`retain_vm`,
              environment_gcs.`heap_affinitize_mask`,
              environment_gcs.`allow_very_large_objects`
        FROM environment_gcs
        """
    
        static member TableName() = "environment_gcs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EnvironmentGcs.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EnvironmentGcs.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EnvironmentGcs.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `environment_runtimes`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type EnvironmentRuntimes =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("runtimeMoniker")>] RuntimeMoniker: string
          [<JsonPropertyName("msBuildMoniker")>] MsBuildMoniker: string
          [<JsonPropertyName("isAot")>] IsAot: bool }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentId = String.Empty
              Name = String.Empty
              RuntimeMoniker = String.Empty
              MsBuildMoniker = String.Empty
              IsAot = true }
    
        static member CreateTableSql() = """
        CREATE TABLE environment_runtimes
(
    id               TEXT    not null
        constraint environment_runtimes_pk
            primary key,
    environment_id   TEXT    not null
        constraint environment_runtimes_job_environments_id_fk
            references job_environments,
    name             TEXT    not null,
    runtime_moniker  TEXT    not null,
    ms_build_moniker TEXT    not null,
    is_aot           INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              environment_runtimes.`id`,
              environment_runtimes.`environment_id`,
              environment_runtimes.`name`,
              environment_runtimes.`runtime_moniker`,
              environment_runtimes.`ms_build_moniker`,
              environment_runtimes.`is_aot`
        FROM environment_runtimes
        """
    
        static member TableName() = "environment_runtimes"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EnvironmentRuntimes.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EnvironmentRuntimes.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EnvironmentRuntimes.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `environmental_variables`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type EnvironmentalVariables =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentalId")>] EnvironmentalId: string
          [<JsonPropertyName("variableKey")>] VariableKey: string
          [<JsonPropertyName("variableValue")>] VariableValue: string }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentalId = String.Empty
              VariableKey = String.Empty
              VariableValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE environmental_variables
(
    id               TEXT not null
        constraint environmental_variables_pk
            primary key,
    environmental_id TEXT not null
        constraint environmental_variables_job_environments_id_fk
            references job_environments,
    variable_key     TEXT not null,
    variable_value   TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              environmental_variables.`id`,
              environmental_variables.`environmental_id`,
              environmental_variables.`variable_key`,
              environmental_variables.`variable_value`
        FROM environmental_variables
        """
    
        static member TableName() = "environmental_variables"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EnvironmentalVariables.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EnvironmentalVariables.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EnvironmentalVariables.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `job_accuracy`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type JobAccuracy =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("evaluateOverhead")>] EvaluateOverhead: int64
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("outlierMode")>] OutlierMode: string
          [<JsonPropertyName("analyzeLaunchVariance")>] AnalyzeLaunchVariance: int64
          [<JsonPropertyName("maxAbsoluteErrorNanoSeconds")>] MaxAbsoluteErrorNanoSeconds: decimal
          [<JsonPropertyName("maxAbsoluteErrorUnit")>] MaxAbsoluteErrorUnit: string
          [<JsonPropertyName("maxRelativeError")>] MaxRelativeError: decimal
          [<JsonPropertyName("minInvokeCount")>] MinInvokeCount: int64
          [<JsonPropertyName("minIterationItemNanoSeconds")>] MinIterationItemNanoSeconds: decimal
          [<JsonPropertyName("minIterationTimeUnit")>] MinIterationTimeUnit: string }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Frozen = 0L
              EvaluateOverhead = 0L
              HasChanges = true
              OutlierMode = String.Empty
              AnalyzeLaunchVariance = 0L
              MaxAbsoluteErrorNanoSeconds = 0m
              MaxAbsoluteErrorUnit = String.Empty
              MaxRelativeError = 0m
              MinInvokeCount = 0L
              MinIterationItemNanoSeconds = 0m
              MinIterationTimeUnit = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "job_accuracy"
(
    id                              TEXT    not null
        constraint job_accuracy_pk
            primary key,
    job_id                          TEXT    not null
        constraint job_accuracy_benchmark_jobs_id_fk
            references benchmark_jobs,
    frozen                          INTEGER not null,
    evaluate_overhead               INTEGER not null,
    has_changes                     INTEGER not null,
    outlier_mode                    TEXT    not null,
    analyze_launch_variance         INTEGER not null,
    max_absolute_error_nano_seconds REAL    not null,
    max_absolute_error_unit         TEXT    not null,
    max_relative_error              REAL    not null,
    min_invoke_count                INTEGER not null,
    min_iteration_item_nano_seconds REAL    not null,
    min_iteration_time_unit         TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              job_accuracy.`id`,
              job_accuracy.`job_id`,
              job_accuracy.`frozen`,
              job_accuracy.`evaluate_overhead`,
              job_accuracy.`has_changes`,
              job_accuracy.`outlier_mode`,
              job_accuracy.`analyze_launch_variance`,
              job_accuracy.`max_absolute_error_nano_seconds`,
              job_accuracy.`max_absolute_error_unit`,
              job_accuracy.`max_relative_error`,
              job_accuracy.`min_invoke_count`,
              job_accuracy.`min_iteration_item_nano_seconds`,
              job_accuracy.`min_iteration_time_unit`
        FROM job_accuracy
        """
    
        static member TableName() = "job_accuracy"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ JobAccuracy.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  JobAccuracy.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  JobAccuracy.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `job_environments`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type JobEnvironments =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("affinity")>] Affinity: int64
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("jit")>] Jit: string
          [<JsonPropertyName("platform")>] Platform: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("largeAddressAware")>] LargeAddressAware: int64
          [<JsonPropertyName("powerPlanMode")>] PowerPlanMode: string option }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Affinity = 0L
              Frozen = 0L
              EnvironmentId = String.Empty
              Jit = String.Empty
              Platform = String.Empty
              HasChanges = true
              LargeAddressAware = 0L
              PowerPlanMode = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "job_environments"
(
    id                  TEXT    not null
        constraint job_environments_pk
            primary key,
    job_id              TEXT    not null
        constraint job_environments_benchmark_jobs_id_fk
            references benchmark_jobs,
    affinity            INTEGER not null,
    frozen              INTEGER not null,
    environment_id      TEXT    not null,
    jit                 TEXT    not null,
    platform            TEXT    not null,
    has_changes         INTEGER not null,
    large_address_aware INTEGER not null,
    power_plan_mode     TEXT
)
        """
    
        static member SelectSql() = """
        SELECT
              job_environments.`id`,
              job_environments.`job_id`,
              job_environments.`affinity`,
              job_environments.`frozen`,
              job_environments.`environment_id`,
              job_environments.`jit`,
              job_environments.`platform`,
              job_environments.`has_changes`,
              job_environments.`large_address_aware`,
              job_environments.`power_plan_mode`
        FROM job_environments
        """
    
        static member TableName() = "job_environments"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ JobEnvironments.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  JobEnvironments.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  JobEnvironments.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `job_runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type JobRuns =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("jobRunId")>] JobRunId: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("invocationCount")>] InvocationCount: int64
          [<JsonPropertyName("iterationCount")>] IterationCount: int64
          [<JsonPropertyName("iterationTimeNanoSeconds")>] IterationTimeNanoSeconds: int64
          [<JsonPropertyName("iterationTimeUnit")>] IterationTimeUnit: string
          [<JsonPropertyName("launchCount")>] LaunchCount: int64
          [<JsonPropertyName("memoryRandomization")>] MemoryRandomization: int64
          [<JsonPropertyName("runStrategy")>] RunStrategy: string
          [<JsonPropertyName("unrollFactor")>] UnrollFactor: int64
          [<JsonPropertyName("warmupCount")>] WarmupCount: int64
          [<JsonPropertyName("maxIterationCount")>] MaxIterationCount: int64
          [<JsonPropertyName("minIterationCount")>] MinIterationCount: int64
          [<JsonPropertyName("maxWarmupIterationCount")>] MaxWarmupIterationCount: int64
          [<JsonPropertyName("minWarmupIterationCount")>] MinWarmupIterationCount: int64 }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Frozen = 0L
              JobRunId = String.Empty
              HasChanges = true
              InvocationCount = 0L
              IterationCount = 0L
              IterationTimeNanoSeconds = 0L
              IterationTimeUnit = String.Empty
              LaunchCount = 0L
              MemoryRandomization = 0L
              RunStrategy = String.Empty
              UnrollFactor = 0L
              WarmupCount = 0L
              MaxIterationCount = 0L
              MinIterationCount = 0L
              MaxWarmupIterationCount = 0L
              MinWarmupIterationCount = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE job_runs
(
    id                          TEXT    not null
        constraint job_runs_pk
            primary key,
    job_id                      TEXT    not null
        constraint job_runs_benchmark_jobs_id_fk
            references benchmark_jobs,
    frozen                      INTEGER not null,
    job_run_id                  TEXT    not null,
    has_changes                 INTEGER not null,
    invocation_count            INTEGER not null,
    iteration_count             INTEGER not null,
    iteration_time_nano_seconds INTEGER not null,
    iteration_time_unit         TEXT    not null,
    launch_count                INTEGER not null,
    memory_randomization        INTEGER not null,
    run_strategy                TEXT    not null,
    unroll_factor               INTEGER not null,
    warmup_count                integer not null,
    max_iteration_count         INTEGER not null,
    min_iteration_count         INTEGER not null,
    max_warmup_iteration_count  INTEGER not null,
    min_warmup_iteration_count  INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              job_runs.`id`,
              job_runs.`job_id`,
              job_runs.`frozen`,
              job_runs.`job_run_id`,
              job_runs.`has_changes`,
              job_runs.`invocation_count`,
              job_runs.`iteration_count`,
              job_runs.`iteration_time_nano_seconds`,
              job_runs.`iteration_time_unit`,
              job_runs.`launch_count`,
              job_runs.`memory_randomization`,
              job_runs.`run_strategy`,
              job_runs.`unroll_factor`,
              job_runs.`warmup_count`,
              job_runs.`max_iteration_count`,
              job_runs.`min_iteration_count`,
              job_runs.`max_warmup_iteration_count`,
              job_runs.`min_warmup_iteration_count`
        FROM job_runs
        """
    
        static member TableName() = "job_runs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ JobRuns.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  JobRuns.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  JobRuns.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `method_info`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type MethodInfo =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("name")>] Name: string option }
    
        static member Blank() =
            { Id = None
              Name = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "method_info"
(
    id   TEXT
        constraint method_info_pk
            primary key,
    name TEXT
)
        """
    
        static member SelectSql() = """
        SELECT
              method_info.`id`,
              method_info.`name`
        FROM method_info
        """
    
        static member TableName() = "method_info"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ MethodInfo.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  MethodInfo.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  MethodInfo.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `resource_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type ResourceMetadataItem =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ResourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE resource_metadata
(
    resource_id TEXT not null
        constraint resource_metadata_resources_id_fk
            references resources,
    item_key    TEXT not null,
    item_value  TEXT not null,
    constraint resource_metadata_pk
        primary key (resource_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              resource_metadata.`resource_id`,
              resource_metadata.`item_key`,
              resource_metadata.`item_value`
        FROM resource_metadata
        """
    
        static member TableName() = "resource_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ResourceMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ResourceMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ResourceMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type Resource =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("runId")>] RunId: string option
          [<JsonPropertyName("name")>] Name: string option
          [<JsonPropertyName("resourceType")>] ResourceType: string
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = None
              RunId = None
              Name = None
              ResourceType = String.Empty
              ResourceBlob = BlobField.Empty()
              Hash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE resources
(
    id            TEXT
        constraint resources_pk
            primary key,
    run_id        TEXT
        constraint resources_runs_id_fk
            references runs,
    name          TEXT,
    resource_type TEXT not null,
    resource_blob BLOB not null,
    hash          TEXT not null,
    created_on    TEXT not null,
    constraint resources_uk
        unique (run_id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              resources.`id`,
              resources.`run_id`,
              resources.`name`,
              resources.`resource_type`,
              resources.`resource_blob`,
              resources.`hash`,
              resources.`created_on`
        FROM resources
        """
    
        static member TableName() = "resources"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Resource.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Resource.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Resource.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `run_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type RunMetadataItem =
        { [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { RunId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE run_metadata
(
    run_id     TEXT not null
        constraint run_metadata_runs_id_fk
            references runs,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint run_metadata_pk
        primary key (run_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              run_metadata.`run_id`,
              run_metadata.`item_key`,
              run_metadata.`item_value`
        FROM run_metadata
        """
    
        static member TableName() = "run_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ RunMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  RunMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  RunMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type Runs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("startedOn")>] StartedOn: string }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Description = String.Empty
              StartedOn = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "runs"
(
    id          TEXT not null
        constraint runs_pk
            primary key,
    name        TEXT not null,
    description TEXT not null,
    started_on  TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              runs.`id`,
              runs.`name`,
              runs.`description`,
              runs.`started_on`
        FROM runs
        """
    
        static member TableName() = "runs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Runs.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Runs.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Runs.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `source_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type SourceMetadataItem =
        { [<JsonPropertyName("sourceId")>] SourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { SourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE source_metadata
(
    source_id  TEXT not null
        constraint source_metadata_sources_id_fk
            references sources,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint source_metadata_pk
        primary key (source_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              source_metadata.`source_id`,
              source_metadata.`item_key`,
              source_metadata.`item_value`
        FROM source_metadata
        """
    
        static member TableName() = "source_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ SourceMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  SourceMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  SourceMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `sources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type Source =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("sourceType")>] SourceType: string }
    
        static member Blank() =
            { Id = String.Empty
              RunId = String.Empty
              Name = String.Empty
              SourceType = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "sources"
(
    id          TEXT not null
        constraint sources_pk
            primary key,
    run_id      TEXT not null
        constraint sources_runs_id_fk
            references runs,
    name        TEXT not null,
    source_type TEXT not null,
    constraint sources_uk
        unique (run_id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              sources.`id`,
              sources.`run_id`,
              sources.`name`,
              sources.`source_type`
        FROM sources
        """
    
        static member TableName() = "sources"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Source.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Source.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Source.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
/// Module generated on 20/10/2024 20:40:58 (utc) via Freql.Tools.
[<RequireQualifiedAccess>]
module Parameters =
    /// <summary>
    /// A record representing a new row in the table `artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewArtifactMetadataItem =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewArtifact =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("runId")>] RunId: string option
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("artifactType")>] ArtifactType: string
          [<JsonPropertyName("artifactBlob")>] ArtifactBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = None
              RunId = None
              Name = String.Empty
              ArtifactType = String.Empty
              ArtifactBlob = BlobField.Empty()
              Hash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_build_info`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewBenchmarkBuildInfo =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("benchmarkId")>] BenchmarkId: string
          [<JsonPropertyName("architecture")>] Architecture: string
          [<JsonPropertyName("configuration")>] Configuration: string
          [<JsonPropertyName("chronometerFrequency")>] ChronometerFrequency: string
          [<JsonPropertyName("chronometerResolutionNanoSeconds")>] ChronometerResolutionNanoSeconds: decimal
          [<JsonPropertyName("chronometerResolutionUnit")>] ChronometerResolutionUnit: string
          [<JsonPropertyName("inDocker")>] InDocker: int64
          [<JsonPropertyName("jitInfo")>] JitInfo: string
          [<JsonPropertyName("osVersion")>] OsVersion: string
          [<JsonPropertyName("runtimeVersion")>] RuntimeVersion: string
          [<JsonPropertyName("hardwareIntrinsicsShort")>] HardwareIntrinsicsShort: string
          [<JsonPropertyName("hardwareTimerKind")>] HardwareTimerKind: string
          [<JsonPropertyName("hasRyuJit")>] HasRyuJit: bool
          [<JsonPropertyName("isMonoInstalled")>] IsMonoInstalled: bool
          [<JsonPropertyName("virtualMachineHypervisor")>] VirtualMachineHypervisor: string
          [<JsonPropertyName("benchmarkDotNetVersion")>] BenchmarkDotNetVersion: string
          [<JsonPropertyName("dotNetSdkVersion")>] DotNetSdkVersion: string
          [<JsonPropertyName("gcAllocationQuantum")>] GcAllocationQuantum: int64
          [<JsonPropertyName("isConcurrentGc")>] IsConcurrentGc: bool
          [<JsonPropertyName("isServerGc")>] IsServerGc: bool
          [<JsonPropertyName("cpuMaxFrequencyHz")>] CpuMaxFrequencyHz: decimal option
          [<JsonPropertyName("cpuMinFrequencyHz")>] CpuMinFrequencyHz: decimal option
          [<JsonPropertyName("cpuNominalFrequencyHz")>] CpuNominalFrequencyHz: decimal option
          [<JsonPropertyName("cpuProcessorName")>] CpuProcessorName: string
          [<JsonPropertyName("cpuLogicalCoreCount")>] CpuLogicalCoreCount: int64 option
          [<JsonPropertyName("cpuPhysicalCoreCount")>] CpuPhysicalCoreCount: int64 option
          [<JsonPropertyName("cpuPhysicalProcessorCount")>] CpuPhysicalProcessorCount: int64 option }
    
        static member Blank() =
            { Id = String.Empty
              BenchmarkId = String.Empty
              Architecture = String.Empty
              Configuration = String.Empty
              ChronometerFrequency = String.Empty
              ChronometerResolutionNanoSeconds = 0m
              ChronometerResolutionUnit = String.Empty
              InDocker = 0L
              JitInfo = String.Empty
              OsVersion = String.Empty
              RuntimeVersion = String.Empty
              HardwareIntrinsicsShort = String.Empty
              HardwareTimerKind = String.Empty
              HasRyuJit = true
              IsMonoInstalled = true
              VirtualMachineHypervisor = String.Empty
              BenchmarkDotNetVersion = String.Empty
              DotNetSdkVersion = String.Empty
              GcAllocationQuantum = 0L
              IsConcurrentGc = true
              IsServerGc = true
              CpuMaxFrequencyHz = None
              CpuMinFrequencyHz = None
              CpuNominalFrequencyHz = None
              CpuProcessorName = String.Empty
              CpuLogicalCoreCount = None
              CpuPhysicalCoreCount = None
              CpuPhysicalProcessorCount = None }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_build_info_antivirus_installions`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewBenchmarkBuildInfoAntivirusInstallions =
        { [<JsonPropertyName("buildInfoId")>] BuildInfoId: string
          [<JsonPropertyName("details")>] Details: string }
    
        static member Blank() =
            { BuildInfoId = String.Empty
              Details = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_case_descriptors`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewBenchmarkCaseDescriptors =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("additionalLogic")>] AdditionalLogic: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("methodIndex")>] MethodIndex: int64 option
          [<JsonPropertyName("globalCleanupMethodId")>] GlobalCleanupMethodId: string option
          [<JsonPropertyName("globalSetupMethodId")>] GlobalSetupMethodId: string option
          [<JsonPropertyName("iterationCleanupMethodId")>] IterationCleanupMethodId: string option
          [<JsonPropertyName("iterationSetupMethodId")>] IterationSetupMethodId: string option
          [<JsonPropertyName("operationsPerInvoke")>] OperationsPerInvoke: int64
          [<JsonPropertyName("workloadMethodDisplayInfo")>] WorkloadMethodDisplayInfo: string }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              AdditionalLogic = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              MethodIndex = None
              GlobalCleanupMethodId = None
              GlobalSetupMethodId = None
              IterationCleanupMethodId = None
              IterationSetupMethodId = None
              OperationsPerInvoke = 0L
              WorkloadMethodDisplayInfo = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_cases`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewBenchmarkCases =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("benchmarkId")>] BenchmarkId: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("hasArguments")>] HasArguments: bool
          [<JsonPropertyName("hasParameters")>] HasParameters: bool
          [<JsonPropertyName("parametersCount")>] ParametersCount: int64
          [<JsonPropertyName("parametersDisplayInfo")>] ParametersDisplayInfo: string
          [<JsonPropertyName("parametersFolderInfo")>] ParametersFolderInfo: string
          [<JsonPropertyName("parametersPrintInfo")>] ParametersPrintInfo: string
          [<JsonPropertyName("parametersValueInfo")>] ParametersValueInfo: string }
    
        static member Blank() =
            { Id = String.Empty
              BenchmarkId = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              HasArguments = true
              HasParameters = true
              ParametersCount = 0L
              ParametersDisplayInfo = String.Empty
              ParametersFolderInfo = String.Empty
              ParametersPrintInfo = String.Empty
              ParametersValueInfo = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_jobs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewBenchmarkJobs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("resolveId")>] ResolveId: string }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              Frozen = 0L
              JobId = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              HasChanges = true
              ResolveId = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `benchmarks`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewBenchmark =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("sourceId")>] SourceId: string
          [<JsonPropertyName("title")>] Title: string
          [<JsonPropertyName("allRuntimes")>] AllRuntimes: string
          [<JsonPropertyName("totalTime")>] TotalTime: string
          [<JsonPropertyName("isMultipleRuntimes")>] IsMultipleRuntimes: bool
          [<JsonPropertyName("logFilePath")>] LogFilePath: string
          [<JsonPropertyName("resultsDirectoryPath")>] ResultsDirectoryPath: string
          [<JsonPropertyName("hasCriticalValidationErrors")>] HasCriticalValidationErrors: bool }
    
        static member Blank() =
            { Id = String.Empty
              SourceId = String.Empty
              Title = String.Empty
              AllRuntimes = String.Empty
              TotalTime = String.Empty
              IsMultipleRuntimes = true
              LogFilePath = String.Empty
              ResultsDirectoryPath = String.Empty
              HasCriticalValidationErrors = true }
    
    /// <summary>
    /// A record representing a new row in the table `environment_gcs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewEnvironmentGcs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("concurrent")>] Concurrent: int64
          [<JsonPropertyName("force")>] Force: int64
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("gcId")>] GcId: string
          [<JsonPropertyName("server")>] Server: int64
          [<JsonPropertyName("cpuGroups")>] CpuGroups: int64
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("heapCount")>] HeapCount: int64
          [<JsonPropertyName("noAffinitize")>] NoAffinitize: int64
          [<JsonPropertyName("retainVm")>] RetainVm: int64
          [<JsonPropertyName("heapAffinitizeMask")>] HeapAffinitizeMask: int64
          [<JsonPropertyName("allowVeryLargeObjects")>] AllowVeryLargeObjects: int64 }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentId = String.Empty
              Concurrent = 0L
              Force = 0L
              Frozen = 0L
              GcId = String.Empty
              Server = 0L
              CpuGroups = 0L
              HasChanges = true
              HeapCount = 0L
              NoAffinitize = 0L
              RetainVm = 0L
              HeapAffinitizeMask = 0L
              AllowVeryLargeObjects = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `environment_runtimes`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewEnvironmentRuntimes =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("runtimeMoniker")>] RuntimeMoniker: string
          [<JsonPropertyName("msBuildMoniker")>] MsBuildMoniker: string
          [<JsonPropertyName("isAot")>] IsAot: bool }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentId = String.Empty
              Name = String.Empty
              RuntimeMoniker = String.Empty
              MsBuildMoniker = String.Empty
              IsAot = true }
    
    /// <summary>
    /// A record representing a new row in the table `environmental_variables`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewEnvironmentalVariables =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentalId")>] EnvironmentalId: string
          [<JsonPropertyName("variableKey")>] VariableKey: string
          [<JsonPropertyName("variableValue")>] VariableValue: string }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentalId = String.Empty
              VariableKey = String.Empty
              VariableValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `job_accuracy`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewJobAccuracy =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("evaluateOverhead")>] EvaluateOverhead: int64
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("outlierMode")>] OutlierMode: string
          [<JsonPropertyName("analyzeLaunchVariance")>] AnalyzeLaunchVariance: int64
          [<JsonPropertyName("maxAbsoluteErrorNanoSeconds")>] MaxAbsoluteErrorNanoSeconds: decimal
          [<JsonPropertyName("maxAbsoluteErrorUnit")>] MaxAbsoluteErrorUnit: string
          [<JsonPropertyName("maxRelativeError")>] MaxRelativeError: decimal
          [<JsonPropertyName("minInvokeCount")>] MinInvokeCount: int64
          [<JsonPropertyName("minIterationItemNanoSeconds")>] MinIterationItemNanoSeconds: decimal
          [<JsonPropertyName("minIterationTimeUnit")>] MinIterationTimeUnit: string }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Frozen = 0L
              EvaluateOverhead = 0L
              HasChanges = true
              OutlierMode = String.Empty
              AnalyzeLaunchVariance = 0L
              MaxAbsoluteErrorNanoSeconds = 0m
              MaxAbsoluteErrorUnit = String.Empty
              MaxRelativeError = 0m
              MinInvokeCount = 0L
              MinIterationItemNanoSeconds = 0m
              MinIterationTimeUnit = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `job_environments`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewJobEnvironments =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("affinity")>] Affinity: int64
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("jit")>] Jit: string
          [<JsonPropertyName("platform")>] Platform: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("largeAddressAware")>] LargeAddressAware: int64
          [<JsonPropertyName("powerPlanMode")>] PowerPlanMode: string option }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Affinity = 0L
              Frozen = 0L
              EnvironmentId = String.Empty
              Jit = String.Empty
              Platform = String.Empty
              HasChanges = true
              LargeAddressAware = 0L
              PowerPlanMode = None }
    
    /// <summary>
    /// A record representing a new row in the table `job_runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewJobRuns =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("frozen")>] Frozen: int64
          [<JsonPropertyName("jobRunId")>] JobRunId: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("invocationCount")>] InvocationCount: int64
          [<JsonPropertyName("iterationCount")>] IterationCount: int64
          [<JsonPropertyName("iterationTimeNanoSeconds")>] IterationTimeNanoSeconds: int64
          [<JsonPropertyName("iterationTimeUnit")>] IterationTimeUnit: string
          [<JsonPropertyName("launchCount")>] LaunchCount: int64
          [<JsonPropertyName("memoryRandomization")>] MemoryRandomization: int64
          [<JsonPropertyName("runStrategy")>] RunStrategy: string
          [<JsonPropertyName("unrollFactor")>] UnrollFactor: int64
          [<JsonPropertyName("warmupCount")>] WarmupCount: int64
          [<JsonPropertyName("maxIterationCount")>] MaxIterationCount: int64
          [<JsonPropertyName("minIterationCount")>] MinIterationCount: int64
          [<JsonPropertyName("maxWarmupIterationCount")>] MaxWarmupIterationCount: int64
          [<JsonPropertyName("minWarmupIterationCount")>] MinWarmupIterationCount: int64 }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Frozen = 0L
              JobRunId = String.Empty
              HasChanges = true
              InvocationCount = 0L
              IterationCount = 0L
              IterationTimeNanoSeconds = 0L
              IterationTimeUnit = String.Empty
              LaunchCount = 0L
              MemoryRandomization = 0L
              RunStrategy = String.Empty
              UnrollFactor = 0L
              WarmupCount = 0L
              MaxIterationCount = 0L
              MinIterationCount = 0L
              MaxWarmupIterationCount = 0L
              MinWarmupIterationCount = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `method_info`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewMethodInfo =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("name")>] Name: string option }
    
        static member Blank() =
            { Id = None
              Name = None }
    
    /// <summary>
    /// A record representing a new row in the table `resource_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewResourceMetadataItem =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ResourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewResource =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("runId")>] RunId: string option
          [<JsonPropertyName("name")>] Name: string option
          [<JsonPropertyName("resourceType")>] ResourceType: string
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = None
              RunId = None
              Name = None
              ResourceType = String.Empty
              ResourceBlob = BlobField.Empty()
              Hash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `run_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewRunMetadataItem =
        { [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { RunId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewRuns =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("startedOn")>] StartedOn: string }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Description = String.Empty
              StartedOn = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `source_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewSourceMetadataItem =
        { [<JsonPropertyName("sourceId")>] SourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { SourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `sources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    type NewSource =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("sourceType")>] SourceType: string }
    
        static member Blank() =
            { Id = String.Empty
              RunId = String.Empty
              Name = String.Empty
              SourceType = String.Empty }
    
/// Module generated on 20/10/2024 20:40:58 (utc) via Freql.Tools.
[<RequireQualifiedAccess>]
module Operations =

    let buildSql (lines: string list) = lines |> String.concat Environment.NewLine

    /// <summary>
    /// Select a `Records.ArtifactMetadataItem` from the table `artifact_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ArtifactMetadataItem&gt;` and uses Records.ArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ArtifactMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ArtifactMetadataItem&gt;` and uses Records.ArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ArtifactMetadataItem>(sql, parameters)
    
    let insertArtifactMetadataItem (context: SqliteContext) (parameters: Parameters.NewArtifactMetadataItem) =
        context.Insert("artifact_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Artifact` from the table `artifacts`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Artifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Artifact>(sql, parameters)
    
    let insertArtifact (context: SqliteContext) (parameters: Parameters.NewArtifact) =
        context.Insert("artifacts", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkBuildInfo` from the table `benchmark_build_info`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkBuildInfo&gt;` and uses Records.BenchmarkBuildInfo.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkBuildInfoRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkBuildInfoRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkBuildInfo.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkBuildInfo>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkBuildInfo&gt;` and uses Records.BenchmarkBuildInfo.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkBuildInfoRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkBuildInfoRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkBuildInfo.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkBuildInfo>(sql, parameters)
    
    let insertBenchmarkBuildInfo (context: SqliteContext) (parameters: Parameters.NewBenchmarkBuildInfo) =
        context.Insert("benchmark_build_info", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkBuildInfoAntivirusInstallions` from the table `benchmark_build_info_antivirus_installions`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkBuildInfoAntivirusInstallions&gt;` and uses Records.BenchmarkBuildInfoAntivirusInstallions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkBuildInfoAntivirusInstallionsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkBuildInfoAntivirusInstallionsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkBuildInfoAntivirusInstallions.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkBuildInfoAntivirusInstallions>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkBuildInfoAntivirusInstallions&gt;` and uses Records.BenchmarkBuildInfoAntivirusInstallions.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkBuildInfoAntivirusInstallionsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkBuildInfoAntivirusInstallionsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkBuildInfoAntivirusInstallions.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkBuildInfoAntivirusInstallions>(sql, parameters)
    
    let insertBenchmarkBuildInfoAntivirusInstallions (context: SqliteContext) (parameters: Parameters.NewBenchmarkBuildInfoAntivirusInstallions) =
        context.Insert("benchmark_build_info_antivirus_installions", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkCaseDescriptors` from the table `benchmark_case_descriptors`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkCaseDescriptors&gt;` and uses Records.BenchmarkCaseDescriptors.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkCaseDescriptorsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkCaseDescriptorsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkCaseDescriptors.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkCaseDescriptors>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkCaseDescriptors&gt;` and uses Records.BenchmarkCaseDescriptors.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkCaseDescriptorsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkCaseDescriptorsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkCaseDescriptors.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkCaseDescriptors>(sql, parameters)
    
    let insertBenchmarkCaseDescriptors (context: SqliteContext) (parameters: Parameters.NewBenchmarkCaseDescriptors) =
        context.Insert("benchmark_case_descriptors", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkCases` from the table `benchmark_cases`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkCases&gt;` and uses Records.BenchmarkCases.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkCasesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkCasesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkCases.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkCases>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkCases&gt;` and uses Records.BenchmarkCases.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkCasesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkCasesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkCases.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkCases>(sql, parameters)
    
    let insertBenchmarkCases (context: SqliteContext) (parameters: Parameters.NewBenchmarkCases) =
        context.Insert("benchmark_cases", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkJobs` from the table `benchmark_jobs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkJobs&gt;` and uses Records.BenchmarkJobs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkJobsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkJobsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkJobs.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkJobs>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkJobs&gt;` and uses Records.BenchmarkJobs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkJobsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkJobsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkJobs.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkJobs>(sql, parameters)
    
    let insertBenchmarkJobs (context: SqliteContext) (parameters: Parameters.NewBenchmarkJobs) =
        context.Insert("benchmark_jobs", parameters)
    
    /// <summary>
    /// Select a `Records.Benchmark` from the table `benchmarks`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Benchmark&gt;` and uses Records.Benchmark.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Benchmark.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Benchmark>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Benchmark&gt;` and uses Records.Benchmark.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Benchmark.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Benchmark>(sql, parameters)
    
    let insertBenchmark (context: SqliteContext) (parameters: Parameters.NewBenchmark) =
        context.Insert("benchmarks", parameters)
    
    /// <summary>
    /// Select a `Records.EnvironmentGcs` from the table `environment_gcs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EnvironmentGcs&gt;` and uses Records.EnvironmentGcs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentGcsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentGcsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentGcs.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EnvironmentGcs>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EnvironmentGcs&gt;` and uses Records.EnvironmentGcs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentGcsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentGcsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentGcs.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EnvironmentGcs>(sql, parameters)
    
    let insertEnvironmentGcs (context: SqliteContext) (parameters: Parameters.NewEnvironmentGcs) =
        context.Insert("environment_gcs", parameters)
    
    /// <summary>
    /// Select a `Records.EnvironmentRuntimes` from the table `environment_runtimes`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EnvironmentRuntimes&gt;` and uses Records.EnvironmentRuntimes.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentRuntimesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentRuntimesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentRuntimes.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EnvironmentRuntimes>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EnvironmentRuntimes&gt;` and uses Records.EnvironmentRuntimes.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentRuntimesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentRuntimesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentRuntimes.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EnvironmentRuntimes>(sql, parameters)
    
    let insertEnvironmentRuntimes (context: SqliteContext) (parameters: Parameters.NewEnvironmentRuntimes) =
        context.Insert("environment_runtimes", parameters)
    
    /// <summary>
    /// Select a `Records.EnvironmentalVariables` from the table `environmental_variables`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EnvironmentalVariables&gt;` and uses Records.EnvironmentalVariables.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentalVariablesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentalVariablesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentalVariables.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EnvironmentalVariables>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EnvironmentalVariables&gt;` and uses Records.EnvironmentalVariables.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentalVariablesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentalVariablesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentalVariables.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EnvironmentalVariables>(sql, parameters)
    
    let insertEnvironmentalVariables (context: SqliteContext) (parameters: Parameters.NewEnvironmentalVariables) =
        context.Insert("environmental_variables", parameters)
    
    /// <summary>
    /// Select a `Records.JobAccuracy` from the table `job_accuracy`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.JobAccuracy&gt;` and uses Records.JobAccuracy.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobAccuracyRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobAccuracyRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobAccuracy.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.JobAccuracy>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.JobAccuracy&gt;` and uses Records.JobAccuracy.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobAccuracyRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobAccuracyRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobAccuracy.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.JobAccuracy>(sql, parameters)
    
    let insertJobAccuracy (context: SqliteContext) (parameters: Parameters.NewJobAccuracy) =
        context.Insert("job_accuracy", parameters)
    
    /// <summary>
    /// Select a `Records.JobEnvironments` from the table `job_environments`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.JobEnvironments&gt;` and uses Records.JobEnvironments.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobEnvironmentsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobEnvironmentsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobEnvironments.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.JobEnvironments>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.JobEnvironments&gt;` and uses Records.JobEnvironments.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobEnvironmentsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobEnvironmentsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobEnvironments.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.JobEnvironments>(sql, parameters)
    
    let insertJobEnvironments (context: SqliteContext) (parameters: Parameters.NewJobEnvironments) =
        context.Insert("job_environments", parameters)
    
    /// <summary>
    /// Select a `Records.JobRuns` from the table `job_runs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.JobRuns&gt;` and uses Records.JobRuns.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobRunsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobRunsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobRuns.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.JobRuns>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.JobRuns&gt;` and uses Records.JobRuns.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobRunsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobRunsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobRuns.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.JobRuns>(sql, parameters)
    
    let insertJobRuns (context: SqliteContext) (parameters: Parameters.NewJobRuns) =
        context.Insert("job_runs", parameters)
    
    /// <summary>
    /// Select a `Records.MethodInfo` from the table `method_info`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.MethodInfo&gt;` and uses Records.MethodInfo.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectMethodInfoRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectMethodInfoRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MethodInfo.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.MethodInfo>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.MethodInfo&gt;` and uses Records.MethodInfo.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectMethodInfoRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectMethodInfoRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MethodInfo.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.MethodInfo>(sql, parameters)
    
    let insertMethodInfo (context: SqliteContext) (parameters: Parameters.NewMethodInfo) =
        context.Insert("method_info", parameters)
    
    /// <summary>
    /// Select a `Records.ResourceMetadataItem` from the table `resource_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ResourceMetadataItem&gt;` and uses Records.ResourceMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ResourceMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ResourceMetadataItem&gt;` and uses Records.ResourceMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ResourceMetadataItem>(sql, parameters)
    
    let insertResourceMetadataItem (context: SqliteContext) (parameters: Parameters.NewResourceMetadataItem) =
        context.Insert("resource_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Resource` from the table `resources`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Resource&gt;` and uses Records.Resource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Resource.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Resource>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Resource&gt;` and uses Records.Resource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Resource.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Resource>(sql, parameters)
    
    let insertResource (context: SqliteContext) (parameters: Parameters.NewResource) =
        context.Insert("resources", parameters)
    
    /// <summary>
    /// Select a `Records.RunMetadataItem` from the table `run_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.RunMetadataItem&gt;` and uses Records.RunMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectRunMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectRunMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.RunMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.RunMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.RunMetadataItem&gt;` and uses Records.RunMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectRunMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectRunMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.RunMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.RunMetadataItem>(sql, parameters)
    
    let insertRunMetadataItem (context: SqliteContext) (parameters: Parameters.NewRunMetadataItem) =
        context.Insert("run_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Runs` from the table `runs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Runs&gt;` and uses Records.Runs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectRunsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectRunsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Runs.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Runs>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Runs&gt;` and uses Records.Runs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectRunsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectRunsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Runs.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Runs>(sql, parameters)
    
    let insertRuns (context: SqliteContext) (parameters: Parameters.NewRuns) =
        context.Insert("runs", parameters)
    
    /// <summary>
    /// Select a `Records.SourceMetadataItem` from the table `source_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.SourceMetadataItem&gt;` and uses Records.SourceMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectSourceMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectSourceMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.SourceMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.SourceMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.SourceMetadataItem&gt;` and uses Records.SourceMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectSourceMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectSourceMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.SourceMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.SourceMetadataItem>(sql, parameters)
    
    let insertSourceMetadataItem (context: SqliteContext) (parameters: Parameters.NewSourceMetadataItem) =
        context.Insert("source_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Source` from the table `sources`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Source&gt;` and uses Records.Source.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectSourceRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectSourceRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Source.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Source>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Source&gt;` and uses Records.Source.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 20/10/2024 20:40:58
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectSourceRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectSourceRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Source.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Source>(sql, parameters)
    
    let insertSource (context: SqliteContext) (parameters: Parameters.NewSource) =
        context.Insert("sources", parameters)
    
[<RequireQualifiedAccess>]
module Initialization =
    let sql (checkIfExists: bool) =
        [ Records.Runs.InitializationSql checkIfExists
          Records.Source.InitializationSql checkIfExists
          Records.Benchmark.InitializationSql checkIfExists
          Records.BenchmarkCases.InitializationSql checkIfExists
          Records.BenchmarkJobs.InitializationSql checkIfExists
          Records.Resource.InitializationSql checkIfExists
          Records.JobEnvironments.InitializationSql checkIfExists
          Records.MethodInfo.InitializationSql checkIfExists
          Records.BenchmarkBuildInfo.InitializationSql checkIfExists
          Records.Artifact.InitializationSql checkIfExists
          Records.SourceMetadataItem.InitializationSql checkIfExists
          Records.RunMetadataItem.InitializationSql checkIfExists
          Records.ResourceMetadataItem.InitializationSql checkIfExists
          Records.JobRuns.InitializationSql checkIfExists
          Records.JobAccuracy.InitializationSql checkIfExists
          Records.EnvironmentalVariables.InitializationSql checkIfExists
          Records.EnvironmentRuntimes.InitializationSql checkIfExists
          Records.EnvironmentGcs.InitializationSql checkIfExists
          Records.BenchmarkCaseDescriptors.InitializationSql checkIfExists
          Records.BenchmarkBuildInfoAntivirusInstallions.InitializationSql checkIfExists
          Records.ArtifactMetadataItem.InitializationSql checkIfExists ]
        |> List.concat

    let run (checkIfExists: bool) (ctx: SqliteContext) =
        sql checkIfExists |> List.iter (ctx.ExecuteSqlNonQuery >> ignore)

    let runInTransaction (checkIfExists: bool) (ctx: SqliteContext) =
        ctx.ExecuteInTransaction(fun t -> sql checkIfExists |> List.iter (t.ExecuteSqlNonQuery >> ignore))
