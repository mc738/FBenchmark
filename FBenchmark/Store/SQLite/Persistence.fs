//----------------------------------------------------------------------------------- 
// <auto-generated>                                                                   
//     This code was generated via Freql.Tools (https://github.com/mc738/Freql).      
//                                                                                    
//     Manual changes to this file may cause unexpected behavior in your application. 
//     Manual changes to this file will be overwritten if the code is regenerated.    
// </auto-generated>                                                                  
//----------------------------------------------------------------------------------- 

namespace FBenchmark.Store.SQLite.Persistence

open System
open System.Text.Json.Serialization
open Freql.Core.Common
open Freql.Sqlite

module private Utils =

    open System.Text.RegularExpressions

    let updateCheckIfExists (update: bool) (name: string) (value: string) =
        match update with
        | false -> value
        | true ->
            let regex = Regex($"CREATE {name}")

            regex.Replace(value, $"CREATE {name} IF NOT EXISTS", 1)

/// <summary>
/// Records representing database bindings for `records`.
/// </summary>
/// <remarks>
/// Module generated on 23/10/2024 19:56:14 (utc) via Freql.Tools.
/// </remarks>
[<RequireQualifiedAccess>]
module Records =
    /// <summary>
    /// A record representing a row in the table `artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ArtifactMetadataItem =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE artifact_metadata
(
    artifact_id TEXT not null
        constraint artifact_metadata_artifacts_id_fk
            references artifacts,
    item_key    TEXT not null,
    item_value  TEXT not null,
    constraint artifact_metadata_pk
        primary key (artifact_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              artifact_metadata.`artifact_id`,
              artifact_metadata.`item_key`,
              artifact_metadata.`item_value`
        FROM artifact_metadata
        """
    
        static member TableName() = "artifact_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ArtifactMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ArtifactMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ArtifactMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type Artifact =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("runId")>] RunId: string option
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("artifactType")>] ArtifactType: string
          [<JsonPropertyName("artifactBlob")>] ArtifactBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = None
              RunId = None
              Name = String.Empty
              ArtifactType = String.Empty
              ArtifactBlob = BlobField.Empty()
              Hash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE artifacts
(
    id            TEXT
        constraint artifacts_pk
            primary key,
    run_id        TEXT
        constraint artifacts_runs_id_fk
            references runs,
    name          TEXT not null,
    artifact_type TEXT not null,
    artifact_blob BLOB not null,
    hash          TEXT not null,
    created_on    TEXT not null,
    constraint artifacts_uk
        unique (run_id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              artifacts.`id`,
              artifacts.`run_id`,
              artifacts.`name`,
              artifacts.`artifact_type`,
              artifacts.`artifact_blob`,
              artifacts.`hash`,
              artifacts.`created_on`
        FROM artifacts
        """
    
        static member TableName() = "artifacts"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Artifact.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Artifact.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Artifact.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_case_descriptors`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type BenchmarkCaseDescriptors =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("additionalLogic")>] AdditionalLogic: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("methodIndex")>] MethodIndex: int64
          [<JsonPropertyName("globalCleanupMethodId")>] GlobalCleanupMethodId: string option
          [<JsonPropertyName("globalSetupMethodId")>] GlobalSetupMethodId: string option
          [<JsonPropertyName("iterationCleanupMethodId")>] IterationCleanupMethodId: string option
          [<JsonPropertyName("iterationSetupMethodId")>] IterationSetupMethodId: string option
          [<JsonPropertyName("operationsPerInvoke")>] OperationsPerInvoke: int64
          [<JsonPropertyName("workloadMethodDisplayInfo")>] WorkloadMethodDisplayInfo: string }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              AdditionalLogic = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              MethodIndex = 0L
              GlobalCleanupMethodId = None
              GlobalSetupMethodId = None
              IterationCleanupMethodId = None
              IterationSetupMethodId = None
              OperationsPerInvoke = 0L
              WorkloadMethodDisplayInfo = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "benchmark_case_descriptors"
(
    id                           TEXT    not null
        constraint benchmark_case_descriptors_pk
            primary key,
    case_id                      TEXT    not null
        constraint benchmark_case_descriptors_benchmark_cases_id_fk
            references benchmark_cases,
    additional_logic             TEXT    not null,
    display_info                 TEXT    not null,
    folder_info                  TEXT    not null,
    method_index                 integer not null,
    global_cleanup_method_id     TEXT
        constraint benchmark_case_descriptors_method_info_id_fk
            references method_info,
    global_setup_method_id       TEXT
        constraint benchmark_case_descriptors_method_info_id_fk_2
            references method_info,
    iteration_cleanup_method_id  TEXT
        constraint benchmark_case_descriptors_method_info_id_fk_3
            references method_info,
    iteration_setup_method_id    TEXT
        constraint benchmark_case_descriptors_method_info_id_fk_4
            references method_info,
    operations_per_invoke        INTEGER not null,
    workload_method_display_info TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_case_descriptors.`id`,
              benchmark_case_descriptors.`case_id`,
              benchmark_case_descriptors.`additional_logic`,
              benchmark_case_descriptors.`display_info`,
              benchmark_case_descriptors.`folder_info`,
              benchmark_case_descriptors.`method_index`,
              benchmark_case_descriptors.`global_cleanup_method_id`,
              benchmark_case_descriptors.`global_setup_method_id`,
              benchmark_case_descriptors.`iteration_cleanup_method_id`,
              benchmark_case_descriptors.`iteration_setup_method_id`,
              benchmark_case_descriptors.`operations_per_invoke`,
              benchmark_case_descriptors.`workload_method_display_info`
        FROM benchmark_case_descriptors
        """
    
        static member TableName() = "benchmark_case_descriptors"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkCaseDescriptors.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkCaseDescriptors.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkCaseDescriptors.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_cases`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type BenchmarkCases =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("benchmarkId")>] BenchmarkId: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("hasArguments")>] HasArguments: bool
          [<JsonPropertyName("hasParameters")>] HasParameters: bool
          [<JsonPropertyName("parametersCount")>] ParametersCount: int64
          [<JsonPropertyName("parametersDisplayInfo")>] ParametersDisplayInfo: string
          [<JsonPropertyName("parametersFolderInfo")>] ParametersFolderInfo: string
          [<JsonPropertyName("parametersPrintInfo")>] ParametersPrintInfo: string
          [<JsonPropertyName("parametersValueInfo")>] ParametersValueInfo: string }
    
        static member Blank() =
            { Id = String.Empty
              BenchmarkId = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              HasArguments = true
              HasParameters = true
              ParametersCount = 0L
              ParametersDisplayInfo = String.Empty
              ParametersFolderInfo = String.Empty
              ParametersPrintInfo = String.Empty
              ParametersValueInfo = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE benchmark_cases
(
    id             TEXT    not null
        constraint benchmark_cases_pk
            primary key,
    benchmark_id   TEXT    not null
        constraint benchmark_cases_benchmarks_id_fk
            references benchmarks,
    display_info   TEXT    not null,
    folder_info    TEXT    not null,
    has_arguments  INTEGER not null,
    has_parameters INTEGER not null
, parameters_count INTEGER not null, parameters_display_info TEXT not null, parameters_folder_info TEXT not null, parameters_print_info TEXT not null, parameters_value_info TEXT not null)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_cases.`id`,
              benchmark_cases.`benchmark_id`,
              benchmark_cases.`display_info`,
              benchmark_cases.`folder_info`,
              benchmark_cases.`has_arguments`,
              benchmark_cases.`has_parameters`,
              benchmark_cases.`parameters_count`,
              benchmark_cases.`parameters_display_info`,
              benchmark_cases.`parameters_folder_info`,
              benchmark_cases.`parameters_print_info`,
              benchmark_cases.`parameters_value_info`
        FROM benchmark_cases
        """
    
        static member TableName() = "benchmark_cases"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkCases.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkCases.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkCases.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_host_info`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type BenchmarkHostInfo =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("benchmarkId")>] BenchmarkId: string
          [<JsonPropertyName("architecture")>] Architecture: string
          [<JsonPropertyName("configuration")>] Configuration: string
          [<JsonPropertyName("chronometerFrequency")>] ChronometerFrequency: float
          [<JsonPropertyName("chronometerResolutionNanoseconds")>] ChronometerResolutionNanoseconds: float
          [<JsonPropertyName("chronometerResolutionUnitId")>] ChronometerResolutionUnitId: string
          [<JsonPropertyName("inDocker")>] InDocker: bool
          [<JsonPropertyName("jitInfo")>] JitInfo: string
          [<JsonPropertyName("osVersion")>] OsVersion: string
          [<JsonPropertyName("runtimeVersion")>] RuntimeVersion: string
          [<JsonPropertyName("hardwareIntrinsicsShort")>] HardwareIntrinsicsShort: string
          [<JsonPropertyName("hardwareTimerKind")>] HardwareTimerKind: string
          [<JsonPropertyName("hasRyuJit")>] HasRyuJit: bool
          [<JsonPropertyName("isMonoInstalled")>] IsMonoInstalled: bool
          [<JsonPropertyName("virtualMachineHypervisor")>] VirtualMachineHypervisor: string
          [<JsonPropertyName("benchmarkDotNetVersion")>] BenchmarkDotNetVersion: string
          [<JsonPropertyName("dotNetSdkVersion")>] DotNetSdkVersion: string
          [<JsonPropertyName("gcAllocationQuantum")>] GcAllocationQuantum: int64
          [<JsonPropertyName("isConcurrentGc")>] IsConcurrentGc: bool
          [<JsonPropertyName("isServerGc")>] IsServerGc: bool
          [<JsonPropertyName("cpuMaxFrequencyHz")>] CpuMaxFrequencyHz: float option
          [<JsonPropertyName("cpuMinFrequencyHz")>] CpuMinFrequencyHz: float option
          [<JsonPropertyName("cpuNominalFrequencyHz")>] CpuNominalFrequencyHz: float option
          [<JsonPropertyName("cpuProcessorName")>] CpuProcessorName: string
          [<JsonPropertyName("cpuLogicalCoreCount")>] CpuLogicalCoreCount: int64 option
          [<JsonPropertyName("cpuPhysicalCoreCount")>] CpuPhysicalCoreCount: int64 option
          [<JsonPropertyName("cpuPhysicalProcessorCount")>] CpuPhysicalProcessorCount: int64 option }
    
        static member Blank() =
            { Id = String.Empty
              BenchmarkId = String.Empty
              Architecture = String.Empty
              Configuration = String.Empty
              ChronometerFrequency = 0.
              ChronometerResolutionNanoseconds = 0.
              ChronometerResolutionUnitId = String.Empty
              InDocker = true
              JitInfo = String.Empty
              OsVersion = String.Empty
              RuntimeVersion = String.Empty
              HardwareIntrinsicsShort = String.Empty
              HardwareTimerKind = String.Empty
              HasRyuJit = true
              IsMonoInstalled = true
              VirtualMachineHypervisor = String.Empty
              BenchmarkDotNetVersion = String.Empty
              DotNetSdkVersion = String.Empty
              GcAllocationQuantum = 0L
              IsConcurrentGc = true
              IsServerGc = true
              CpuMaxFrequencyHz = None
              CpuMinFrequencyHz = None
              CpuNominalFrequencyHz = None
              CpuProcessorName = String.Empty
              CpuLogicalCoreCount = None
              CpuPhysicalCoreCount = None
              CpuPhysicalProcessorCount = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "benchmark_host_info"
(
    id                                 TEXT    not null
        constraint benchmark_host_info_pk
            primary key,
    benchmark_id                       TEXT    not null
        constraint benchmark_host_info_benchmarks_id_fk
            references benchmarks,
    architecture                       TEXT    not null,
    configuration                      TEXT    not null,
    chronometer_frequency              REAL    not null,
    chronometer_resolution_nanoseconds REAL    not null,
    chronometer_resolution_unit_id     TEXT    not null
        constraint benchmark_host_info_units_id_fk
            references units,
    in_docker                          INTEGER not null,
    jit_info                           TEXT    not null,
    os_version                         TEXT    not null,
    runtime_version                    TEXT    not null,
    hardware_intrinsics_short          TEXT    not null,
    hardware_timer_kind                TEXT    not null,
    has_ryu_jit                        INTEGER not null,
    is_mono_installed                  INTEGER not null,
    virtual_machine_hypervisor         TEXT    not null,
    benchmark_dot_net_version          TEXT    not null,
    dot_net_sdk_version                TEXT    not null,
    gc_allocation_quantum              INTEGER not null,
    is_concurrent_gc                   INTEGER not null,
    is_server_gc                       INTEGER not null,
    cpu_max_frequency_hz               REAL,
    cpu_min_frequency_hz               REAL,
    cpu_nominal_frequency_hz           REAL,
    cpu_processor_name                 TEXT    not null,
    cpu_logical_core_count             INTEGER,
    cpu_physical_core_count            INTEGER,
    cpu_physical_processor_count       integer
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_host_info.`id`,
              benchmark_host_info.`benchmark_id`,
              benchmark_host_info.`architecture`,
              benchmark_host_info.`configuration`,
              benchmark_host_info.`chronometer_frequency`,
              benchmark_host_info.`chronometer_resolution_nanoseconds`,
              benchmark_host_info.`chronometer_resolution_unit_id`,
              benchmark_host_info.`in_docker`,
              benchmark_host_info.`jit_info`,
              benchmark_host_info.`os_version`,
              benchmark_host_info.`runtime_version`,
              benchmark_host_info.`hardware_intrinsics_short`,
              benchmark_host_info.`hardware_timer_kind`,
              benchmark_host_info.`has_ryu_jit`,
              benchmark_host_info.`is_mono_installed`,
              benchmark_host_info.`virtual_machine_hypervisor`,
              benchmark_host_info.`benchmark_dot_net_version`,
              benchmark_host_info.`dot_net_sdk_version`,
              benchmark_host_info.`gc_allocation_quantum`,
              benchmark_host_info.`is_concurrent_gc`,
              benchmark_host_info.`is_server_gc`,
              benchmark_host_info.`cpu_max_frequency_hz`,
              benchmark_host_info.`cpu_min_frequency_hz`,
              benchmark_host_info.`cpu_nominal_frequency_hz`,
              benchmark_host_info.`cpu_processor_name`,
              benchmark_host_info.`cpu_logical_core_count`,
              benchmark_host_info.`cpu_physical_core_count`,
              benchmark_host_info.`cpu_physical_processor_count`
        FROM benchmark_host_info
        """
    
        static member TableName() = "benchmark_host_info"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkHostInfo.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkHostInfo.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkHostInfo.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_host_info_antivirus_installations`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type BenchmarkHostInfoAntivirusInstallations =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("hostInfoId")>] HostInfoId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("path")>] Path: string }
    
        static member Blank() =
            { Id = String.Empty
              HostInfoId = String.Empty
              Name = String.Empty
              Path = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "benchmark_host_info_antivirus_installations"
(
    id           TEXT not null
        constraint benchmark_host_info_antivirus_installations_pk
            primary key,
    host_info_id TEXT not null
        constraint benchmark_host_info_antivirus_installations_benchmark_host_info_id_fk
            references benchmark_host_info,
    name         TEXT not null,
    path         TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_host_info_antivirus_installations.`id`,
              benchmark_host_info_antivirus_installations.`host_info_id`,
              benchmark_host_info_antivirus_installations.`name`,
              benchmark_host_info_antivirus_installations.`path`
        FROM benchmark_host_info_antivirus_installations
        """
    
        static member TableName() = "benchmark_host_info_antivirus_installations"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkHostInfoAntivirusInstallations.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkHostInfoAntivirusInstallations.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkHostInfoAntivirusInstallations.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_jobs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type BenchmarkJobs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("jobDisplayId")>] JobDisplayId: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("resolveId")>] ResolveId: string }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              Frozen = true
              JobDisplayId = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              HasChanges = true
              ResolveId = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "benchmark_jobs"
(
    id             TEXT    not null
        constraint benchmark_jobs_pk
            primary key,
    case_id        TEXT    not null
        constraint benchmark_jobs_benchmark_cases_id_fk
            references benchmark_cases,
    frozen         INTEGER not null,
    job_display_id TEXT    not null,
    display_info   TEXT    not null,
    folder_info    TEXT    not null,
    has_changes    INTEGER not null,
    resolve_id     TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_jobs.`id`,
              benchmark_jobs.`case_id`,
              benchmark_jobs.`frozen`,
              benchmark_jobs.`job_display_id`,
              benchmark_jobs.`display_info`,
              benchmark_jobs.`folder_info`,
              benchmark_jobs.`has_changes`,
              benchmark_jobs.`resolve_id`
        FROM benchmark_jobs
        """
    
        static member TableName() = "benchmark_jobs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkJobs.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkJobs.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkJobs.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmark_reports`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type BenchmarkReports =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("success")>] Success: bool
          [<JsonPropertyName("gcStatsGen0Collections")>] GcStatsGen0Collections: int64
          [<JsonPropertyName("gcStatsGen1Collections")>] GcStatsGen1Collections: int64
          [<JsonPropertyName("gcStatsGen2Collections")>] GcStatsGen2Collections: int64
          [<JsonPropertyName("gcStatsTotalOperations")>] GcStatsTotalOperations: int64
          [<JsonPropertyName("gcStatsTotalAllocatedBytes")>] GcStatsTotalAllocatedBytes: int64 option
          [<JsonPropertyName("gcStatsBytesAllocatedPerOperation")>] GcStatsBytesAllocatedPerOperation: int64 option
          [<JsonPropertyName("resultsStatsKurtosis")>] ResultsStatsKurtosis: float
          [<JsonPropertyName("resultsStatsMax")>] ResultsStatsMax: float
          [<JsonPropertyName("resultsStatsMean")>] ResultsStatsMean: float
          [<JsonPropertyName("resultsStatsMedian")>] ResultsStatsMedian: float
          [<JsonPropertyName("resultsStatsN")>] ResultsStatsN: int64
          [<JsonPropertyName("resultsStatsQ1")>] ResultsStatsQ1: float
          [<JsonPropertyName("resultsStatsQ3")>] ResultsStatsQ3: float
          [<JsonPropertyName("resultsStatsSkewness")>] ResultsStatsSkewness: float
          [<JsonPropertyName("resultsStatsVariance")>] ResultsStatsVariance: float
          [<JsonPropertyName("resultsStatsInterquartileRange")>] ResultsStatsInterquartileRange: float
          [<JsonPropertyName("resultsStatsLowerFence")>] ResultsStatsLowerFence: float
          [<JsonPropertyName("resultsStatsStandardDeviation")>] ResultsStatsStandardDeviation: float
          [<JsonPropertyName("resultsStatsStandardError")>] ResultsStatsStandardError: float
          [<JsonPropertyName("resultsStatsUpperFence")>] ResultsStatsUpperFence: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalLevel")>] ResultsStatsConfidenceIntervalLevel: string
          [<JsonPropertyName("resultsStatsConfidenceIntervalLower")>] ResultsStatsConfidenceIntervalLower: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalMargin")>] ResultsStatsConfidenceIntervalMargin: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalMean")>] ResultsStatsConfidenceIntervalMean: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalN")>] ResultsStatsConfidenceIntervalN: int64
          [<JsonPropertyName("resultsStatsConfidenceIntervalUpper")>] ResultsStatsConfidenceIntervalUpper: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalStandardError")>] ResultsStatsConfidenceIntervalStandardError: float
          [<JsonPropertyName("resultsStatsPercentilesP0")>] ResultsStatsPercentilesP0: float
          [<JsonPropertyName("resultsStatsPercentilesP25")>] ResultsStatsPercentilesP25: float
          [<JsonPropertyName("resultsStatsPercentilesP50")>] ResultsStatsPercentilesP50: float
          [<JsonPropertyName("resultsStatsPercentilesP67")>] ResultsStatsPercentilesP67: float
          [<JsonPropertyName("resultsStatsPercentilesP80")>] ResultsStatsPercentilesP80: float
          [<JsonPropertyName("resultsStatsPercentilesP85")>] ResultsStatsPercentilesP85: float
          [<JsonPropertyName("resultsStatsPercentilesP90")>] ResultsStatsPercentilesP90: float
          [<JsonPropertyName("resultsStatsPercentilesP95")>] ResultsStatsPercentilesP95: float
          [<JsonPropertyName("resultsStatsPercentilesP100")>] ResultsStatsPercentilesP100: float }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              Success = true
              GcStatsGen0Collections = 0L
              GcStatsGen1Collections = 0L
              GcStatsGen2Collections = 0L
              GcStatsTotalOperations = 0L
              GcStatsTotalAllocatedBytes = None
              GcStatsBytesAllocatedPerOperation = None
              ResultsStatsKurtosis = 0.
              ResultsStatsMax = 0.
              ResultsStatsMean = 0.
              ResultsStatsMedian = 0.
              ResultsStatsN = 0L
              ResultsStatsQ1 = 0.
              ResultsStatsQ3 = 0.
              ResultsStatsSkewness = 0.
              ResultsStatsVariance = 0.
              ResultsStatsInterquartileRange = 0.
              ResultsStatsLowerFence = 0.
              ResultsStatsStandardDeviation = 0.
              ResultsStatsStandardError = 0.
              ResultsStatsUpperFence = 0.
              ResultsStatsConfidenceIntervalLevel = String.Empty
              ResultsStatsConfidenceIntervalLower = 0.
              ResultsStatsConfidenceIntervalMargin = 0.
              ResultsStatsConfidenceIntervalMean = 0.
              ResultsStatsConfidenceIntervalN = 0L
              ResultsStatsConfidenceIntervalUpper = 0.
              ResultsStatsConfidenceIntervalStandardError = 0.
              ResultsStatsPercentilesP0 = 0.
              ResultsStatsPercentilesP25 = 0.
              ResultsStatsPercentilesP50 = 0.
              ResultsStatsPercentilesP67 = 0.
              ResultsStatsPercentilesP80 = 0.
              ResultsStatsPercentilesP85 = 0.
              ResultsStatsPercentilesP90 = 0.
              ResultsStatsPercentilesP95 = 0.
              ResultsStatsPercentilesP100 = 0. }
    
        static member CreateTableSql() = """
        CREATE TABLE "benchmark_reports"
(
    id                                               TEXT    not null
        constraint benchmark_reports_pk
            primary key,
    case_id                                          TEXT    not null
        constraint benchmark_reports_benchmark_cases_id_fk
            references benchmark_cases,
    success                                          INTEGER not null,
    gc_stats_gen0_collections                        INTEGER not null,
    gc_stats_gen1_collections                        INTEGER not null,
    gc_stats_gen2_collections                        INTEGER not null,
    gc_stats_total_operations                        INTEGER not null,
    gc_stats_total_allocated_bytes                   INTEGER,
    gc_stats_bytes_allocated_per_operation           INTEGER,
    results_stats_kurtosis                           REAL    not null,
    results_stats_max                                REAL    not null,
    results_stats_mean                               REAL    not null,
    results_stats_median                             REAL    not null,
    results_stats_n                                  INTEGER not null,
    results_stats_q1                                 REAL    not null,
    results_stats_q3                                 REAL    not null,
    results_stats_skewness                           REAL    not null,
    results_stats_variance                           REAL    not null,
    results_stats_interquartile_range                REAL    not null,
    results_stats_lower_fence                        REAL    not null,
    results_stats_standard_deviation                 REAL    not null,
    results_stats_standard_error                     REAL    not null,
    results_stats_upper_fence                        REAL    not null,
    results_stats_confidence_interval_level          TEXT    not null,
    results_stats_confidence_interval_lower          REAL    not null,
    results_stats_confidence_interval_margin         REAL    not null,
    results_stats_confidence_interval_mean           REAL    not null,
    results_stats_confidence_interval_n              INTEGER not null,
    results_stats_confidence_interval_upper          REAL    not null,
    results_stats_confidence_interval_standard_error REAL    not null,
    results_stats_percentiles_p0                     REAL    not null,
    results_stats_percentiles_p25                    REAL    not null,
    results_stats_percentiles_p50                    REAL    not null,
    results_stats_percentiles_p67                    REAL    not null,
    results_stats_percentiles_p80                    REAL    not null,
    results_stats_percentiles_p85                    REAL    not null,
    results_stats_percentiles_p90                    REAL    not null,
    results_stats_percentiles_p95                    REAL    not null,
    results_stats_percentiles_p100                   REAL    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmark_reports.`id`,
              benchmark_reports.`case_id`,
              benchmark_reports.`success`,
              benchmark_reports.`gc_stats_gen0_collections`,
              benchmark_reports.`gc_stats_gen1_collections`,
              benchmark_reports.`gc_stats_gen2_collections`,
              benchmark_reports.`gc_stats_total_operations`,
              benchmark_reports.`gc_stats_total_allocated_bytes`,
              benchmark_reports.`gc_stats_bytes_allocated_per_operation`,
              benchmark_reports.`results_stats_kurtosis`,
              benchmark_reports.`results_stats_max`,
              benchmark_reports.`results_stats_mean`,
              benchmark_reports.`results_stats_median`,
              benchmark_reports.`results_stats_n`,
              benchmark_reports.`results_stats_q1`,
              benchmark_reports.`results_stats_q3`,
              benchmark_reports.`results_stats_skewness`,
              benchmark_reports.`results_stats_variance`,
              benchmark_reports.`results_stats_interquartile_range`,
              benchmark_reports.`results_stats_lower_fence`,
              benchmark_reports.`results_stats_standard_deviation`,
              benchmark_reports.`results_stats_standard_error`,
              benchmark_reports.`results_stats_upper_fence`,
              benchmark_reports.`results_stats_confidence_interval_level`,
              benchmark_reports.`results_stats_confidence_interval_lower`,
              benchmark_reports.`results_stats_confidence_interval_margin`,
              benchmark_reports.`results_stats_confidence_interval_mean`,
              benchmark_reports.`results_stats_confidence_interval_n`,
              benchmark_reports.`results_stats_confidence_interval_upper`,
              benchmark_reports.`results_stats_confidence_interval_standard_error`,
              benchmark_reports.`results_stats_percentiles_p0`,
              benchmark_reports.`results_stats_percentiles_p25`,
              benchmark_reports.`results_stats_percentiles_p50`,
              benchmark_reports.`results_stats_percentiles_p67`,
              benchmark_reports.`results_stats_percentiles_p80`,
              benchmark_reports.`results_stats_percentiles_p85`,
              benchmark_reports.`results_stats_percentiles_p90`,
              benchmark_reports.`results_stats_percentiles_p95`,
              benchmark_reports.`results_stats_percentiles_p100`
        FROM benchmark_reports
        """
    
        static member TableName() = "benchmark_reports"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BenchmarkReports.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BenchmarkReports.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BenchmarkReports.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `benchmarks`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type Benchmark =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("sourceId")>] SourceId: string
          [<JsonPropertyName("title")>] Title: string
          [<JsonPropertyName("allRuntimes")>] AllRuntimes: string
          [<JsonPropertyName("totalTime")>] TotalTime: string
          [<JsonPropertyName("isMultipleRuntimes")>] IsMultipleRuntimes: bool
          [<JsonPropertyName("logFilePath")>] LogFilePath: string
          [<JsonPropertyName("resultsDirectoryPath")>] ResultsDirectoryPath: string
          [<JsonPropertyName("hasCriticalValidationErrors")>] HasCriticalValidationErrors: bool }
    
        static member Blank() =
            { Id = String.Empty
              SourceId = String.Empty
              Title = String.Empty
              AllRuntimes = String.Empty
              TotalTime = String.Empty
              IsMultipleRuntimes = true
              LogFilePath = String.Empty
              ResultsDirectoryPath = String.Empty
              HasCriticalValidationErrors = true }
    
        static member CreateTableSql() = """
        CREATE TABLE benchmarks
(
    id                             TEXT    not null
        constraint benchmarks_pk
            primary key,
    source_id                      TEXT    not null
        constraint benchmarks_sources_id_fk
            references sources,
    title                          TEXT    not null,
    all_runtimes                   TEXT    not null,
    total_time                     TEXT    not null,
    is_multiple_runtimes           integer not null,
    log_file_path                  TEXT    not null,
    results_directory_path         TEXT    not null,
    has_critical_validation_errors integer not null
)
        """
    
        static member SelectSql() = """
        SELECT
              benchmarks.`id`,
              benchmarks.`source_id`,
              benchmarks.`title`,
              benchmarks.`all_runtimes`,
              benchmarks.`total_time`,
              benchmarks.`is_multiple_runtimes`,
              benchmarks.`log_file_path`,
              benchmarks.`results_directory_path`,
              benchmarks.`has_critical_validation_errors`
        FROM benchmarks
        """
    
        static member TableName() = "benchmarks"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Benchmark.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Benchmark.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Benchmark.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `build_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type BuildArtifacts =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("buildResultId")>] BuildResultId: string
          [<JsonPropertyName("path")>] Path: string }
    
        static member Blank() =
            { Id = String.Empty
              BuildResultId = String.Empty
              Path = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "build_artifacts"
(
    id              TEXT not null
        constraint build_artifacts_pk
            primary key,
    build_result_id TEXT not null
        constraint build_artifacts_build_results_id_fk
            references build_results,
    path            TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              build_artifacts.`id`,
              build_artifacts.`build_result_id`,
              build_artifacts.`path`
        FROM build_artifacts
        """
    
        static member TableName() = "build_artifacts"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BuildArtifacts.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BuildArtifacts.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BuildArtifacts.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `build_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type BuildResults =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("errorMessage")>] ErrorMessage: string option
          [<JsonPropertyName("isBuildSuccess")>] IsBuildSuccess: bool
          [<JsonPropertyName("isGenerateSuccess")>] IsGenerateSuccess: bool
          [<JsonPropertyName("executablePath")>] ExecutablePath: string
          [<JsonPropertyName("programName")>] ProgramName: string
          [<JsonPropertyName("appConfigPath")>] AppConfigPath: string option
          [<JsonPropertyName("binariesDirectoryPath")>] BinariesDirectoryPath: string option
          [<JsonPropertyName("intermediateDirectoryPath")>] IntermediateDirectoryPath: string option
          [<JsonPropertyName("packageDirectoryName")>] PackageDirectoryName: string option
          [<JsonPropertyName("programCodePath")>] ProgramCodePath: string option
          [<JsonPropertyName("projectFilePath")>] ProjectFilePath: string option
          [<JsonPropertyName("buildArtifactsDirectoryPath")>] BuildArtifactsDirectoryPath: string option
          [<JsonPropertyName("buildScriptFilePath")>] BuildScriptFilePath: string option
          [<JsonPropertyName("nugetConfigPath")>] NugetConfigPath: string option
          [<JsonPropertyName("rootArtifactsFolderPath")>] RootArtifactsFolderPath: string option }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              ErrorMessage = None
              IsBuildSuccess = true
              IsGenerateSuccess = true
              ExecutablePath = String.Empty
              ProgramName = String.Empty
              AppConfigPath = None
              BinariesDirectoryPath = None
              IntermediateDirectoryPath = None
              PackageDirectoryName = None
              ProgramCodePath = None
              ProjectFilePath = None
              BuildArtifactsDirectoryPath = None
              BuildScriptFilePath = None
              NugetConfigPath = None
              RootArtifactsFolderPath = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "build_results"
(
    id                             TEXT    not null
        constraint build_results_pk
            primary key,
    report_id                      TEXT    not null
        constraint build_results_benchmark_results_id_fk
            references benchmark_reports,
    error_message                  TEXT,
    is_build_success               INTEGER not null,
    is_generate_success            INTEGER not null,
    executable_path                TEXT    not null,
    program_name                   TEXT    not null,
    app_config_path                TEXT,
    binaries_directory_path        TEXT,
    intermediate_directory_path    TEXT,
    package_directory_name         TEXT,
    program_code_path              TEXT,
    project_file_path              TEXT,
    build_artifacts_directory_path TEXT,
    build_script_file_path         TEXT,
    nuget_config_path              TEXT,
    root_artifacts_folder_path     TEXT
)
        """
    
        static member SelectSql() = """
        SELECT
              build_results.`id`,
              build_results.`report_id`,
              build_results.`error_message`,
              build_results.`is_build_success`,
              build_results.`is_generate_success`,
              build_results.`executable_path`,
              build_results.`program_name`,
              build_results.`app_config_path`,
              build_results.`binaries_directory_path`,
              build_results.`intermediate_directory_path`,
              build_results.`package_directory_name`,
              build_results.`program_code_path`,
              build_results.`project_file_path`,
              build_results.`build_artifacts_directory_path`,
              build_results.`build_script_file_path`,
              build_results.`nuget_config_path`,
              build_results.`root_artifacts_folder_path`
        FROM build_results
        """
    
        static member TableName() = "build_results"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ BuildResults.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  BuildResults.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  BuildResults.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `environment_gcs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type EnvironmentGcs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("concurrent")>] Concurrent: bool
          [<JsonPropertyName("force")>] Force: bool
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("gcDisplayId")>] GcDisplayId: string
          [<JsonPropertyName("server")>] Server: bool
          [<JsonPropertyName("cpuGroups")>] CpuGroups: bool
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("heapCount")>] HeapCount: int64
          [<JsonPropertyName("noAffinitize")>] NoAffinitize: bool
          [<JsonPropertyName("retainVm")>] RetainVm: bool
          [<JsonPropertyName("heapAffinitizeMask")>] HeapAffinitizeMask: int64
          [<JsonPropertyName("allowVeryLargeObjects")>] AllowVeryLargeObjects: bool }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentId = String.Empty
              Concurrent = true
              Force = true
              Frozen = true
              GcDisplayId = String.Empty
              Server = true
              CpuGroups = true
              HasChanges = true
              HeapCount = 0L
              NoAffinitize = true
              RetainVm = true
              HeapAffinitizeMask = 0L
              AllowVeryLargeObjects = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "environment_gcs"
(
    id                       TEXT    not null
        constraint environment_gcs_pk
            primary key,
    environment_id           TEXT    not null
        constraint environment_gcs_job_environments_id_fk
            references job_environments,
    concurrent               INTEGER not null,
    force                    INTEGER not null,
    frozen                   INTEGER not null,
    gc_display_id            TEXT    not null,
    server                   INTEGER not null,
    cpu_groups               INTEGER not null,
    has_changes              INTEGER not null,
    heap_count               INTEGER not null,
    no_affinitize            integer not null,
    retain_vm                INTEGER not null,
    heap_affinitize_mask     INTEGER not null,
    allow_very_large_objects INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              environment_gcs.`id`,
              environment_gcs.`environment_id`,
              environment_gcs.`concurrent`,
              environment_gcs.`force`,
              environment_gcs.`frozen`,
              environment_gcs.`gc_display_id`,
              environment_gcs.`server`,
              environment_gcs.`cpu_groups`,
              environment_gcs.`has_changes`,
              environment_gcs.`heap_count`,
              environment_gcs.`no_affinitize`,
              environment_gcs.`retain_vm`,
              environment_gcs.`heap_affinitize_mask`,
              environment_gcs.`allow_very_large_objects`
        FROM environment_gcs
        """
    
        static member TableName() = "environment_gcs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EnvironmentGcs.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EnvironmentGcs.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EnvironmentGcs.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `environment_runtimes`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type EnvironmentRuntimes =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("runtimeMoniker")>] RuntimeMoniker: string
          [<JsonPropertyName("msBuildMoniker")>] MsBuildMoniker: string
          [<JsonPropertyName("isAot")>] IsAot: bool }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentId = String.Empty
              Name = String.Empty
              RuntimeMoniker = String.Empty
              MsBuildMoniker = String.Empty
              IsAot = true }
    
        static member CreateTableSql() = """
        CREATE TABLE environment_runtimes
(
    id               TEXT    not null
        constraint environment_runtimes_pk
            primary key,
    environment_id   TEXT    not null
        constraint environment_runtimes_job_environments_id_fk
            references job_environments,
    name             TEXT    not null,
    runtime_moniker  TEXT    not null,
    ms_build_moniker TEXT    not null,
    is_aot           INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              environment_runtimes.`id`,
              environment_runtimes.`environment_id`,
              environment_runtimes.`name`,
              environment_runtimes.`runtime_moniker`,
              environment_runtimes.`ms_build_moniker`,
              environment_runtimes.`is_aot`
        FROM environment_runtimes
        """
    
        static member TableName() = "environment_runtimes"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EnvironmentRuntimes.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EnvironmentRuntimes.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EnvironmentRuntimes.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `environmental_variables`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type EnvironmentalVariables =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentalId")>] EnvironmentalId: string
          [<JsonPropertyName("variableKey")>] VariableKey: string
          [<JsonPropertyName("variableValue")>] VariableValue: string }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentalId = String.Empty
              VariableKey = String.Empty
              VariableValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE environmental_variables
(
    id               TEXT not null
        constraint environmental_variables_pk
            primary key,
    environmental_id TEXT not null
        constraint environmental_variables_job_environments_id_fk
            references job_environments,
    variable_key     TEXT not null,
    variable_value   TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              environmental_variables.`id`,
              environmental_variables.`environmental_id`,
              environmental_variables.`variable_key`,
              environmental_variables.`variable_value`
        FROM environmental_variables
        """
    
        static member TableName() = "environmental_variables"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ EnvironmentalVariables.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  EnvironmentalVariables.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  EnvironmentalVariables.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `execution_result_errors`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ExecutionResultErrors =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("error")>] Error: string }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              Error = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE execution_result_errors
(
    id                  TEXT not null
        constraint execution_result_errors_pk
            primary key,
    execution_result_id TEXT not null
        constraint execution_result_errors_execution_results_id_fk
            references execution_results,
    error               TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              execution_result_errors.`id`,
              execution_result_errors.`execution_result_id`,
              execution_result_errors.`error`
        FROM execution_result_errors
        """
    
        static member TableName() = "execution_result_errors"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ExecutionResultErrors.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ExecutionResultErrors.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ExecutionResultErrors.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `execution_result_items`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ExecutionResultItems =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("value")>] Value: string }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              Value = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE execution_result_items
(
    id                  TEXT not null
        constraint execution_result_items_pk
            primary key,
    execution_result_id TEXT not null
        constraint execution_result_items_execution_results_id_fk
            references execution_results,
    value               TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              execution_result_items.`id`,
              execution_result_items.`execution_result_id`,
              execution_result_items.`value`
        FROM execution_result_items
        """
    
        static member TableName() = "execution_result_items"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ExecutionResultItems.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ExecutionResultItems.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ExecutionResultItems.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `execution_result_measurements`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ExecutionResultMeasurements =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("nanoseconds")>] Nanoseconds: float
          [<JsonPropertyName("operations")>] Operations: int64
          [<JsonPropertyName("iterationIndex")>] IterationIndex: int64
          [<JsonPropertyName("iterationMode")>] IterationMode: string
          [<JsonPropertyName("iterationStage")>] IterationStage: string
          [<JsonPropertyName("launchIndex")>] LaunchIndex: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              Nanoseconds = 0.
              Operations = 0L
              IterationIndex = 0L
              IterationMode = String.Empty
              IterationStage = String.Empty
              LaunchIndex = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE "execution_result_measurements"
(
    id                  TEXT    not null
        constraint execution_result_measurements_pk
            primary key,
    execution_result_id TEXT    not null
        constraint execution_result_measurements_execution_results_id_fk
            references execution_results,
    nanoseconds         REAL    not null,
    operations          INTEGER not null,
    iteration_index     INTEGER not null,
    iteration_mode      TEXT    not null,
    iteration_stage     TEXT    not null,
    launch_index        INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              execution_result_measurements.`id`,
              execution_result_measurements.`execution_result_id`,
              execution_result_measurements.`nanoseconds`,
              execution_result_measurements.`operations`,
              execution_result_measurements.`iteration_index`,
              execution_result_measurements.`iteration_mode`,
              execution_result_measurements.`iteration_stage`,
              execution_result_measurements.`launch_index`
        FROM execution_result_measurements
        """
    
        static member TableName() = "execution_result_measurements"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ExecutionResultMeasurements.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ExecutionResultMeasurements.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ExecutionResultMeasurements.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `execution_result_prefixed_lines`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ExecutionResultPrefixedLines =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("prefixedLine")>] PrefixedLine: string }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              PrefixedLine = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE execution_result_prefixed_lines
(
    id                  TEXT not null
        constraint execution_result_prefixed_lines_pk
            primary key,
    execution_result_id TEXT not null
        constraint execution_result_prefixed_lines_execution_results_id_fk
            references execution_results,
    prefixed_line       TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              execution_result_prefixed_lines.`id`,
              execution_result_prefixed_lines.`execution_result_id`,
              execution_result_prefixed_lines.`prefixed_line`
        FROM execution_result_prefixed_lines
        """
    
        static member TableName() = "execution_result_prefixed_lines"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ExecutionResultPrefixedLines.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ExecutionResultPrefixedLines.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ExecutionResultPrefixedLines.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `execution_result_standard_output_lines`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ExecutionResultStandardOutputLines =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("line")>] Line: string }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              Line = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "execution_result_standard_output_lines"
(
    id                  TEXT not null
        constraint execution_result_standard_output_lines_pk
            primary key,
    execution_result_id TEXT not null
        constraint execution_result_standard_output_lines_execution_results_id_fk
            references execution_results,
    line                TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              execution_result_standard_output_lines.`id`,
              execution_result_standard_output_lines.`execution_result_id`,
              execution_result_standard_output_lines.`line`
        FROM execution_result_standard_output_lines
        """
    
        static member TableName() = "execution_result_standard_output_lines"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ExecutionResultStandardOutputLines.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ExecutionResultStandardOutputLines.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ExecutionResultStandardOutputLines.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `execution_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ExecutionResults =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("exitCode")>] ExitCode: int64 option
          [<JsonPropertyName("isSuccess")>] IsSuccess: bool
          [<JsonPropertyName("processId")>] ProcessId: int64 option }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              ExitCode = None
              IsSuccess = true
              ProcessId = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "execution_results"
(
    id         TEXT    not null
        constraint execution_results_pk
            primary key,
    report_id  TEXT    not null
        constraint execution_results_benchmark_reports_id_fk
            references benchmark_reports,
    exit_code  INTEGER,
    is_success INTEGER not null,
    process_id INTEGER
)
        """
    
        static member SelectSql() = """
        SELECT
              execution_results.`id`,
              execution_results.`report_id`,
              execution_results.`exit_code`,
              execution_results.`is_success`,
              execution_results.`process_id`
        FROM execution_results
        """
    
        static member TableName() = "execution_results"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ExecutionResults.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ExecutionResults.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ExecutionResults.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `generate_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type GenerateArtifacts =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("generateResultId")>] GenerateResultId: string
          [<JsonPropertyName("path")>] Path: string }
    
        static member Blank() =
            { Id = String.Empty
              GenerateResultId = String.Empty
              Path = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "generate_artifacts"
(
    id                 TEXT not null
        constraint generate_artifacts_pk
            primary key,
    generate_result_id TEXT not null
        constraint generate_artifacts_generate_results_id_fk
            references generate_results,
    path               TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              generate_artifacts.`id`,
              generate_artifacts.`generate_result_id`,
              generate_artifacts.`path`
        FROM generate_artifacts
        """
    
        static member TableName() = "generate_artifacts"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ GenerateArtifacts.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  GenerateArtifacts.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  GenerateArtifacts.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `generate_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type GenerateResults =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("isGenerateSuccess")>] IsGenerateSuccess: bool
          [<JsonPropertyName("executablePath")>] ExecutablePath: string
          [<JsonPropertyName("programName")>] ProgramName: string
          [<JsonPropertyName("appConfigPath")>] AppConfigPath: string option
          [<JsonPropertyName("binariesDirectoryPath")>] BinariesDirectoryPath: string option
          [<JsonPropertyName("intermediateDirectoryPath")>] IntermediateDirectoryPath: string option
          [<JsonPropertyName("packagesDirectoryName")>] PackagesDirectoryName: string option
          [<JsonPropertyName("programCodePath")>] ProgramCodePath: string option
          [<JsonPropertyName("projectFilePath")>] ProjectFilePath: string option
          [<JsonPropertyName("buildArtifactsDirectoryPath")>] BuildArtifactsDirectoryPath: string option
          [<JsonPropertyName("buildScriptFilePath")>] BuildScriptFilePath: string option
          [<JsonPropertyName("nugetConfigPath")>] NugetConfigPath: string option
          [<JsonPropertyName("rootArtifactsFolderPath")>] RootArtifactsFolderPath: string option }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              IsGenerateSuccess = true
              ExecutablePath = String.Empty
              ProgramName = String.Empty
              AppConfigPath = None
              BinariesDirectoryPath = None
              IntermediateDirectoryPath = None
              PackagesDirectoryName = None
              ProgramCodePath = None
              ProjectFilePath = None
              BuildArtifactsDirectoryPath = None
              BuildScriptFilePath = None
              NugetConfigPath = None
              RootArtifactsFolderPath = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "generate_results"
(
    id                             TEXT    not null
        constraint generate_results_pk
            primary key,
    report_id                      TEXT    not null
        constraint generate_results_benchmark_reports_id_fk
            references benchmark_reports,
    is_generate_success            INTEGER not null,
    executable_path                TEXT    not null,
    program_name                   TEXT    not null,
    app_config_path                TEXT,
    binaries_directory_path        TEXT,
    intermediate_directory_path    TEXT,
    packages_directory_name        TEXT,
    program_code_path              TEXT,
    project_file_path              TEXT,
    build_artifacts_directory_path TEXT,
    build_script_file_path         TEXT,
    nuget_config_path              TEXT,
    root_artifacts_folder_path     TEXT
)
        """
    
        static member SelectSql() = """
        SELECT
              generate_results.`id`,
              generate_results.`report_id`,
              generate_results.`is_generate_success`,
              generate_results.`executable_path`,
              generate_results.`program_name`,
              generate_results.`app_config_path`,
              generate_results.`binaries_directory_path`,
              generate_results.`intermediate_directory_path`,
              generate_results.`packages_directory_name`,
              generate_results.`program_code_path`,
              generate_results.`project_file_path`,
              generate_results.`build_artifacts_directory_path`,
              generate_results.`build_script_file_path`,
              generate_results.`nuget_config_path`,
              generate_results.`root_artifacts_folder_path`
        FROM generate_results
        """
    
        static member TableName() = "generate_results"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ GenerateResults.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  GenerateResults.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  GenerateResults.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `infrastructure_arguments`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type InfrastructureArguments =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("infrastructureId")>] InfrastructureId: string
          [<JsonPropertyName("textRepresentation")>] TextRepresentation: string }
    
        static member Blank() =
            { Id = String.Empty
              InfrastructureId = String.Empty
              TextRepresentation = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "infrastructure_arguments"
(
    id                  TEXT not null
        constraint infrastructure_arguments_pk
            primary key,
    infrastructure_id   TEXT not null
        constraint infrastructure_arguments_job_infrastructures_id_fk
            references job_infrastructures,
    text_representation TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              infrastructure_arguments.`id`,
              infrastructure_arguments.`infrastructure_id`,
              infrastructure_arguments.`text_representation`
        FROM infrastructure_arguments
        """
    
        static member TableName() = "infrastructure_arguments"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ InfrastructureArguments.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  InfrastructureArguments.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  InfrastructureArguments.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `infrastructure_nuget_references`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type InfrastructureNugetReferences =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("infrastructureId")>] InfrastructureId: string
          [<JsonPropertyName("prerelease")>] Prerelease: bool
          [<JsonPropertyName("packageName")>] PackageName: string
          [<JsonPropertyName("packageSource")>] PackageSource: string
          [<JsonPropertyName("packageVersion")>] PackageVersion: string }
    
        static member Blank() =
            { Id = String.Empty
              InfrastructureId = String.Empty
              Prerelease = true
              PackageName = String.Empty
              PackageSource = String.Empty
              PackageVersion = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE infrastructure_nuget_references
(
    id                TEXT    not null
        constraint infrastructure_nuget_references_pk
            primary key,
    infrastructure_id TEXT    not null
        constraint infrastructure_nuget_references_job_infrastructures_id_fk
            references job_infrastructures,
    prerelease        INTEGER not null,
    package_name      TEXT    not null,
    package_source    TEXT    not null,
    package_version   TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              infrastructure_nuget_references.`id`,
              infrastructure_nuget_references.`infrastructure_id`,
              infrastructure_nuget_references.`prerelease`,
              infrastructure_nuget_references.`package_name`,
              infrastructure_nuget_references.`package_source`,
              infrastructure_nuget_references.`package_version`
        FROM infrastructure_nuget_references
        """
    
        static member TableName() = "infrastructure_nuget_references"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ InfrastructureNugetReferences.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  InfrastructureNugetReferences.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  InfrastructureNugetReferences.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `job_accuracy`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type JobAccuracy =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("evaluateOverhead")>] EvaluateOverhead: bool
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("outlierMode")>] OutlierMode: string
          [<JsonPropertyName("analyzeLaunchVariance")>] AnalyzeLaunchVariance: bool
          [<JsonPropertyName("maxAbsoluteErrorNanoseconds")>] MaxAbsoluteErrorNanoseconds: float
          [<JsonPropertyName("maxAbsoluteErrorUnitId")>] MaxAbsoluteErrorUnitId: string
          [<JsonPropertyName("maxRelativeError")>] MaxRelativeError: float
          [<JsonPropertyName("minInvokeCount")>] MinInvokeCount: int64
          [<JsonPropertyName("minIterationItemNanoseconds")>] MinIterationItemNanoseconds: float
          [<JsonPropertyName("minIterationTimeUnitId")>] MinIterationTimeUnitId: string }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Frozen = true
              EvaluateOverhead = true
              HasChanges = true
              OutlierMode = String.Empty
              AnalyzeLaunchVariance = true
              MaxAbsoluteErrorNanoseconds = 0.
              MaxAbsoluteErrorUnitId = String.Empty
              MaxRelativeError = 0.
              MinInvokeCount = 0L
              MinIterationItemNanoseconds = 0.
              MinIterationTimeUnitId = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "job_accuracy"
(
    id                             TEXT    not null
        constraint job_accuracy_pk
            primary key,
    job_id                         TEXT    not null
        constraint job_accuracy_benchmark_jobs_id_fk
            references benchmark_jobs,
    frozen                         INTEGER not null,
    evaluate_overhead              INTEGER not null,
    has_changes                    INTEGER not null,
    outlier_mode                   TEXT    not null,
    analyze_launch_variance        INTEGER not null,
    max_absolute_error_nanoseconds REAL    not null,
    max_absolute_error_unit_id     TEXT    not null
        constraint job_accuracy_units_id_fk
            references units,
    max_relative_error             REAL    not null,
    min_invoke_count               INTEGER not null,
    min_iteration_item_nanoseconds REAL    not null,
    min_iteration_time_unit_id     TEXT    not null
        constraint job_accuracy_units_id_fk_2
            references units
)
        """
    
        static member SelectSql() = """
        SELECT
              job_accuracy.`id`,
              job_accuracy.`job_id`,
              job_accuracy.`frozen`,
              job_accuracy.`evaluate_overhead`,
              job_accuracy.`has_changes`,
              job_accuracy.`outlier_mode`,
              job_accuracy.`analyze_launch_variance`,
              job_accuracy.`max_absolute_error_nanoseconds`,
              job_accuracy.`max_absolute_error_unit_id`,
              job_accuracy.`max_relative_error`,
              job_accuracy.`min_invoke_count`,
              job_accuracy.`min_iteration_item_nanoseconds`,
              job_accuracy.`min_iteration_time_unit_id`
        FROM job_accuracy
        """
    
        static member TableName() = "job_accuracy"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ JobAccuracy.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  JobAccuracy.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  JobAccuracy.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `job_environments`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type JobEnvironments =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("affinity")>] Affinity: int64
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("environmentDisplayId")>] EnvironmentDisplayId: string
          [<JsonPropertyName("jit")>] Jit: string
          [<JsonPropertyName("platform")>] Platform: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("largeAddressAware")>] LargeAddressAware: bool
          [<JsonPropertyName("powerPlanMode")>] PowerPlanMode: string option }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Affinity = 0L
              Frozen = true
              EnvironmentDisplayId = String.Empty
              Jit = String.Empty
              Platform = String.Empty
              HasChanges = true
              LargeAddressAware = true
              PowerPlanMode = None }
    
        static member CreateTableSql() = """
        CREATE TABLE "job_environments"
(
    id                     TEXT    not null
        constraint job_environments_pk
            primary key,
    job_id                 TEXT    not null
        constraint job_environments_benchmark_jobs_id_fk
            references benchmark_jobs,
    affinity               INTEGER not null,
    frozen                 INTEGER not null,
    environment_display_id TEXT    not null,
    jit                    TEXT    not null,
    platform               TEXT    not null,
    has_changes            INTEGER not null,
    large_address_aware    INTEGER not null,
    power_plan_mode        TEXT
)
        """
    
        static member SelectSql() = """
        SELECT
              job_environments.`id`,
              job_environments.`job_id`,
              job_environments.`affinity`,
              job_environments.`frozen`,
              job_environments.`environment_display_id`,
              job_environments.`jit`,
              job_environments.`platform`,
              job_environments.`has_changes`,
              job_environments.`large_address_aware`,
              job_environments.`power_plan_mode`
        FROM job_environments
        """
    
        static member TableName() = "job_environments"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ JobEnvironments.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  JobEnvironments.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  JobEnvironments.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `job_infrastructures`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type JobInfrastructures =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("clockFrequencyHz")>] ClockFrequencyHz: float option
          [<JsonPropertyName("clockTitle")>] ClockTitle: string option
          [<JsonPropertyName("clockIsAvailable")>] ClockIsAvailable: bool option
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("infrastructureDisplayId")>] InfrastructureDisplayId: string
          [<JsonPropertyName("toolchainName")>] ToolchainName: string
          [<JsonPropertyName("toolchainIsInProcess")>] ToolchainIsInProcess: bool
          [<JsonPropertyName("buildConfiguration")>] BuildConfiguration: string option
          [<JsonPropertyName("hasChanges")>] HasChanges: bool }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              ClockFrequencyHz = None
              ClockTitle = None
              ClockIsAvailable = None
              Frozen = true
              InfrastructureDisplayId = String.Empty
              ToolchainName = String.Empty
              ToolchainIsInProcess = true
              BuildConfiguration = None
              HasChanges = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "job_infrastructures"
(
    id                        TEXT    not null
        constraint job_infrastructures_pk
            primary key,
    job_id                    TEXT    not null
        constraint job_infrastructures_benchmark_jobs_id_fk
            references benchmark_jobs,
    clock_frequency_hz        INTEGER,
    clock_title               TEXT,
    clock_is_available        INTEGER,
    frozen                    INTEGER not null,
    infrastructure_display_id TEXT    not null,
    toolchain_name            TEXT    not null,
    toolchain_is_in_process   INTEGER not null,
    build_configuration       TEXT,
    has_changes               INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              job_infrastructures.`id`,
              job_infrastructures.`job_id`,
              job_infrastructures.`clock_frequency_hz`,
              job_infrastructures.`clock_title`,
              job_infrastructures.`clock_is_available`,
              job_infrastructures.`frozen`,
              job_infrastructures.`infrastructure_display_id`,
              job_infrastructures.`toolchain_name`,
              job_infrastructures.`toolchain_is_in_process`,
              job_infrastructures.`build_configuration`,
              job_infrastructures.`has_changes`
        FROM job_infrastructures
        """
    
        static member TableName() = "job_infrastructures"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ JobInfrastructures.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  JobInfrastructures.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  JobInfrastructures.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `job_meta`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type JobMeta =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("baseline")>] Baseline: bool
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("metaDisplayId")>] MetaDisplayId: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("isDefault")>] IsDefault: bool
          [<JsonPropertyName("isMutator")>] IsMutator: bool }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Baseline = true
              Frozen = true
              MetaDisplayId = String.Empty
              HasChanges = true
              IsDefault = true
              IsMutator = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "job_meta"
(
    id              TEXT    not null
        constraint job_meta_pk
            primary key,
    job_id          TEXT    not null
        constraint job_meta_benchmark_jobs_id_fk
            references benchmark_jobs,
    baseline        INTEGER not null,
    frozen          INTEGER not null,
    meta_display_id TEXT    not null,
    has_changes     INTEGER not null,
    is_default      INTEGER not null,
    is_mutator      INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              job_meta.`id`,
              job_meta.`job_id`,
              job_meta.`baseline`,
              job_meta.`frozen`,
              job_meta.`meta_display_id`,
              job_meta.`has_changes`,
              job_meta.`is_default`,
              job_meta.`is_mutator`
        FROM job_meta
        """
    
        static member TableName() = "job_meta"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ JobMeta.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  JobMeta.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  JobMeta.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `job_runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type JobRuns =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("runDisplayId")>] RunDisplayId: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("invocationCount")>] InvocationCount: int64
          [<JsonPropertyName("iterationCount")>] IterationCount: int64
          [<JsonPropertyName("iterationTimeNanoseconds")>] IterationTimeNanoseconds: float
          [<JsonPropertyName("iterationTimeUnitId")>] IterationTimeUnitId: string
          [<JsonPropertyName("launchCount")>] LaunchCount: int64
          [<JsonPropertyName("memoryRandomization")>] MemoryRandomization: bool
          [<JsonPropertyName("runStrategy")>] RunStrategy: string
          [<JsonPropertyName("unrollFactor")>] UnrollFactor: int64
          [<JsonPropertyName("warmupCount")>] WarmupCount: int64
          [<JsonPropertyName("maxIterationCount")>] MaxIterationCount: int64
          [<JsonPropertyName("minIterationCount")>] MinIterationCount: int64
          [<JsonPropertyName("maxWarmupIterationCount")>] MaxWarmupIterationCount: int64
          [<JsonPropertyName("minWarmupIterationCount")>] MinWarmupIterationCount: int64 }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Frozen = true
              RunDisplayId = String.Empty
              HasChanges = true
              InvocationCount = 0L
              IterationCount = 0L
              IterationTimeNanoseconds = 0.
              IterationTimeUnitId = String.Empty
              LaunchCount = 0L
              MemoryRandomization = true
              RunStrategy = String.Empty
              UnrollFactor = 0L
              WarmupCount = 0L
              MaxIterationCount = 0L
              MinIterationCount = 0L
              MaxWarmupIterationCount = 0L
              MinWarmupIterationCount = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE "job_runs"
(
    id                         TEXT    not null
        constraint job_runs_pk
            primary key,
    job_id                     TEXT    not null
        constraint job_runs_benchmark_jobs_id_fk
            references benchmark_jobs,
    frozen                     INTEGER not null,
    run_display_id             TEXT    not null,
    has_changes                INTEGER not null,
    invocation_count           INTEGER not null,
    iteration_count            INTEGER not null,
    iteration_time_nanoseconds REAL    not null,
    iteration_time_unit_id     TEXT    not null
        constraint job_runs_units_id_fk
            references units,
    launch_count               INTEGER not null,
    memory_randomization       INTEGER not null,
    run_strategy               TEXT    not null,
    unroll_factor              INTEGER not null,
    warmup_count               integer not null,
    max_iteration_count        INTEGER not null,
    min_iteration_count        INTEGER not null,
    max_warmup_iteration_count INTEGER not null,
    min_warmup_iteration_count INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              job_runs.`id`,
              job_runs.`job_id`,
              job_runs.`frozen`,
              job_runs.`run_display_id`,
              job_runs.`has_changes`,
              job_runs.`invocation_count`,
              job_runs.`iteration_count`,
              job_runs.`iteration_time_nanoseconds`,
              job_runs.`iteration_time_unit_id`,
              job_runs.`launch_count`,
              job_runs.`memory_randomization`,
              job_runs.`run_strategy`,
              job_runs.`unroll_factor`,
              job_runs.`warmup_count`,
              job_runs.`max_iteration_count`,
              job_runs.`min_iteration_count`,
              job_runs.`max_warmup_iteration_count`,
              job_runs.`min_warmup_iteration_count`
        FROM job_runs
        """
    
        static member TableName() = "job_runs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ JobRuns.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  JobRuns.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  JobRuns.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `method_info`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type MethodInfo =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "method_info"
(
    id   TEXT not null
        constraint method_info_pk
            primary key,
    name TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              method_info.`id`,
              method_info.`name`
        FROM method_info
        """
    
        static member TableName() = "method_info"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ MethodInfo.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  MethodInfo.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  MethodInfo.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `report_measurements`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ReportMeasurements =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("nanoseconds")>] Nanoseconds: float
          [<JsonPropertyName("operations")>] Operations: int64
          [<JsonPropertyName("iterationIndex")>] IterationIndex: int64
          [<JsonPropertyName("iterationMode")>] IterationMode: string
          [<JsonPropertyName("iterationStage")>] IterationStage: string
          [<JsonPropertyName("launchIndex")>] LaunchIndex: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              Nanoseconds = 0.
              Operations = 0L
              IterationIndex = 0L
              IterationMode = String.Empty
              IterationStage = String.Empty
              LaunchIndex = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE report_measurements
(
    id              TEXT    not null
        constraint report_measurements_pk
            primary key,
    report_id       TEXT    not null
        constraint report_measurements_benchmark_reports_id_fk
            references benchmark_reports,
    nanoseconds     REAL    not null,
    operations      INTEGER not null,
    iteration_index INTEGER not null,
    iteration_mode  TEXT    not null,
    iteration_stage TEXT    not null,
    launch_index    INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              report_measurements.`id`,
              report_measurements.`report_id`,
              report_measurements.`nanoseconds`,
              report_measurements.`operations`,
              report_measurements.`iteration_index`,
              report_measurements.`iteration_mode`,
              report_measurements.`iteration_stage`,
              report_measurements.`launch_index`
        FROM report_measurements
        """
    
        static member TableName() = "report_measurements"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ReportMeasurements.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ReportMeasurements.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ReportMeasurements.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `report_metrics`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ReportMetrics =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("metricKey")>] MetricKey: string
          [<JsonPropertyName("metricValue")>] MetricValue: decimal
          [<JsonPropertyName("metricId")>] MetricId: string
          [<JsonPropertyName("legend")>] Legend: string
          [<JsonPropertyName("unit")>] Unit: string option
          [<JsonPropertyName("displayName")>] DisplayName: string option
          [<JsonPropertyName("numberFormat")>] NumberFormat: string option
          [<JsonPropertyName("unitType")>] UnitType: string
          [<JsonPropertyName("priorityInCategory")>] PriorityInCategory: int64
          [<JsonPropertyName("theGreaterTheBetter")>] TheGreaterTheBetter: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              MetricKey = String.Empty
              MetricValue = 0m
              MetricId = String.Empty
              Legend = String.Empty
              Unit = None
              DisplayName = None
              NumberFormat = None
              UnitType = String.Empty
              PriorityInCategory = 0L
              TheGreaterTheBetter = 0L }
    
        static member CreateTableSql() = """
        CREATE TABLE "report_metrics"
(
    id                     TEXT    not null
        constraint report_metrics_pk
            primary key,
    report_id              TEXT    not null
        constraint report_metrics_benchmark_reports_id_fk
            references benchmark_reports,
    metric_key             TEXT    not null,
    metric_value           REAL    not null,
    metric_id              TEXT    not null,
    legend                 TEXT    not null,
    unit                   TEXT,
    display_name           TEXT,
    number_format          TEXT,
    unit_type              TEXT    not null,
    priority_in_category   INTEGER not null,
    the_greater_the_better INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              report_metrics.`id`,
              report_metrics.`report_id`,
              report_metrics.`metric_key`,
              report_metrics.`metric_value`,
              report_metrics.`metric_id`,
              report_metrics.`legend`,
              report_metrics.`unit`,
              report_metrics.`display_name`,
              report_metrics.`number_format`,
              report_metrics.`unit_type`,
              report_metrics.`priority_in_category`,
              report_metrics.`the_greater_the_better`
        FROM report_metrics
        """
    
        static member TableName() = "report_metrics"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ReportMetrics.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ReportMetrics.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ReportMetrics.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `report_original_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ReportOriginalValues =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("resultValue")>] ResultValue: float
          [<JsonPropertyName("isUpperOutlier")>] IsUpperOutlier: bool
          [<JsonPropertyName("isLowerOutlier")>] IsLowerOutlier: bool }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              ResultValue = 0.
              IsUpperOutlier = true
              IsLowerOutlier = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "report_original_values"
(
    id               TEXT    not null
        constraint report_original_values_pk
            primary key,
    report_id        TEXT    not null
        constraint result_original_values_benchmark_results_id_fk
            references benchmark_reports,
    result_value     REAL    not null,
    is_upper_outlier INTEGER not null,
    is_lower_outlier INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              report_original_values.`id`,
              report_original_values.`report_id`,
              report_original_values.`result_value`,
              report_original_values.`is_upper_outlier`,
              report_original_values.`is_lower_outlier`
        FROM report_original_values
        """
    
        static member TableName() = "report_original_values"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ReportOriginalValues.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ReportOriginalValues.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ReportOriginalValues.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `resource_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ResourceMetadataItem =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ResourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE resource_metadata
(
    resource_id TEXT not null
        constraint resource_metadata_resources_id_fk
            references resources,
    item_key    TEXT not null,
    item_value  TEXT not null,
    constraint resource_metadata_pk
        primary key (resource_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              resource_metadata.`resource_id`,
              resource_metadata.`item_key`,
              resource_metadata.`item_value`
        FROM resource_metadata
        """
    
        static member TableName() = "resource_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ResourceMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ResourceMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ResourceMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type Resource =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("runId")>] RunId: string option
          [<JsonPropertyName("name")>] Name: string option
          [<JsonPropertyName("resourceType")>] ResourceType: string
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = None
              RunId = None
              Name = None
              ResourceType = String.Empty
              ResourceBlob = BlobField.Empty()
              Hash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE resources
(
    id            TEXT
        constraint resources_pk
            primary key,
    run_id        TEXT
        constraint resources_runs_id_fk
            references runs,
    name          TEXT,
    resource_type TEXT not null,
    resource_blob BLOB not null,
    hash          TEXT not null,
    created_on    TEXT not null,
    constraint resources_uk
        unique (run_id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              resources.`id`,
              resources.`run_id`,
              resources.`name`,
              resources.`resource_type`,
              resources.`resource_blob`,
              resources.`hash`,
              resources.`created_on`
        FROM resources
        """
    
        static member TableName() = "resources"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Resource.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Resource.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Resource.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `run_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type RunMetadataItem =
        { [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { RunId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE run_metadata
(
    run_id     TEXT not null
        constraint run_metadata_runs_id_fk
            references runs,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint run_metadata_pk
        primary key (run_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              run_metadata.`run_id`,
              run_metadata.`item_key`,
              run_metadata.`item_value`
        FROM run_metadata
        """
    
        static member TableName() = "run_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ RunMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  RunMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  RunMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type Runs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("startedOn")>] StartedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Description = String.Empty
              StartedOn = DateTime.UtcNow }
    
        static member CreateTableSql() = """
        CREATE TABLE "runs"
(
    id          TEXT not null
        constraint runs_pk
            primary key,
    name        TEXT not null,
    description TEXT not null,
    started_on  TEXT not null
)
        """
    
        static member SelectSql() = """
        SELECT
              runs.`id`,
              runs.`name`,
              runs.`description`,
              runs.`started_on`
        FROM runs
        """
    
        static member TableName() = "runs"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Runs.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Runs.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Runs.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `source_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type SourceMetadataItem =
        { [<JsonPropertyName("sourceId")>] SourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { SourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE source_metadata
(
    source_id  TEXT not null
        constraint source_metadata_sources_id_fk
            references sources,
    item_key   TEXT not null,
    item_value TEXT not null,
    constraint source_metadata_pk
        primary key (source_id, item_key)
)
        """
    
        static member SelectSql() = """
        SELECT
              source_metadata.`source_id`,
              source_metadata.`item_key`,
              source_metadata.`item_value`
        FROM source_metadata
        """
    
        static member TableName() = "source_metadata"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ SourceMetadataItem.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  SourceMetadataItem.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  SourceMetadataItem.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `sources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type Source =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("sourceType")>] SourceType: string }
    
        static member Blank() =
            { Id = String.Empty
              RunId = String.Empty
              Name = String.Empty
              SourceType = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE "sources"
(
    id          TEXT not null
        constraint sources_pk
            primary key,
    run_id      TEXT not null
        constraint sources_runs_id_fk
            references runs,
    name        TEXT not null,
    source_type TEXT not null,
    constraint sources_uk
        unique (run_id, name)
)
        """
    
        static member SelectSql() = """
        SELECT
              sources.`id`,
              sources.`run_id`,
              sources.`name`,
              sources.`source_type`
        FROM sources
        """
    
        static member TableName() = "sources"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Source.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Source.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Source.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `units`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type Units =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("abbreviation")>] Abbreviation: string
          [<JsonPropertyName("abbreviationAscii")>] AbbreviationAscii: string
          [<JsonPropertyName("baseUnits")>] BaseUnits: int64
          [<JsonPropertyName("fullName")>] FullName: string }
    
        static member Blank() =
            { Id = String.Empty
              Abbreviation = String.Empty
              AbbreviationAscii = String.Empty
              BaseUnits = 0L
              FullName = String.Empty }
    
        static member CreateTableSql() = """
        CREATE TABLE units
(
    id                 TEXT    not null
        constraint units_pk
            primary key,
    abbreviation       TEXT    not null,
    abbreviation_ascii TEXT    not null,
    base_units         integer not null,
    full_name          TEXT    not null
)
        """
    
        static member SelectSql() = """
        SELECT
              units.`id`,
              units.`abbreviation`,
              units.`abbreviation_ascii`,
              units.`base_units`,
              units.`full_name`
        FROM units
        """
    
        static member TableName() = "units"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ Units.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  Units.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  Units.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
    /// <summary>
    /// A record representing a row in the table `validation_error`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type ValidationError =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("message")>] Message: string
          [<JsonPropertyName("isCritical")>] IsCritical: bool }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              Message = String.Empty
              IsCritical = true }
    
        static member CreateTableSql() = """
        CREATE TABLE "validation_error"
(
    id          TEXT    not null
        constraint validation_error_pk
            primary key,
    case_id     TEXT    not null
        constraint validation_error_benchmark_cases_id_fk
            references benchmark_cases,
    message     TEXT    not null,
    is_critical INTEGER not null
)
        """
    
        static member SelectSql() = """
        SELECT
              validation_error.`id`,
              validation_error.`case_id`,
              validation_error.`message`,
              validation_error.`is_critical`
        FROM validation_error
        """
    
        static member TableName() = "validation_error"
    
        static member CreateIndexesSql() = []
    
        static member CreateTriggersSql() = []
    
        static member InitializationSql(checkIfExists: bool) =
            [ ValidationError.CreateTableSql()
              |> Utils.updateCheckIfExists checkIfExists "TABLE"
              yield!
                  ValidationError.CreateIndexesSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "INDEX")
              yield!
                  ValidationError.CreateTriggersSql()
                  |> List.map (Utils.updateCheckIfExists checkIfExists "TRIGGER")  ]
    
/// Module generated on 23/10/2024 19:56:14 (utc) via Freql.Tools.
[<RequireQualifiedAccess>]
module Parameters =
    /// <summary>
    /// A record representing a new row in the table `artifact_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewArtifactMetadataItem =
        { [<JsonPropertyName("artifactId")>] ArtifactId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ArtifactId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewArtifact =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("runId")>] RunId: string option
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("artifactType")>] ArtifactType: string
          [<JsonPropertyName("artifactBlob")>] ArtifactBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = None
              RunId = None
              Name = String.Empty
              ArtifactType = String.Empty
              ArtifactBlob = BlobField.Empty()
              Hash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_case_descriptors`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewBenchmarkCaseDescriptors =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("additionalLogic")>] AdditionalLogic: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("methodIndex")>] MethodIndex: int64
          [<JsonPropertyName("globalCleanupMethodId")>] GlobalCleanupMethodId: string option
          [<JsonPropertyName("globalSetupMethodId")>] GlobalSetupMethodId: string option
          [<JsonPropertyName("iterationCleanupMethodId")>] IterationCleanupMethodId: string option
          [<JsonPropertyName("iterationSetupMethodId")>] IterationSetupMethodId: string option
          [<JsonPropertyName("operationsPerInvoke")>] OperationsPerInvoke: int64
          [<JsonPropertyName("workloadMethodDisplayInfo")>] WorkloadMethodDisplayInfo: string }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              AdditionalLogic = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              MethodIndex = 0L
              GlobalCleanupMethodId = None
              GlobalSetupMethodId = None
              IterationCleanupMethodId = None
              IterationSetupMethodId = None
              OperationsPerInvoke = 0L
              WorkloadMethodDisplayInfo = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_cases`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewBenchmarkCases =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("benchmarkId")>] BenchmarkId: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("hasArguments")>] HasArguments: bool
          [<JsonPropertyName("hasParameters")>] HasParameters: bool
          [<JsonPropertyName("parametersCount")>] ParametersCount: int64
          [<JsonPropertyName("parametersDisplayInfo")>] ParametersDisplayInfo: string
          [<JsonPropertyName("parametersFolderInfo")>] ParametersFolderInfo: string
          [<JsonPropertyName("parametersPrintInfo")>] ParametersPrintInfo: string
          [<JsonPropertyName("parametersValueInfo")>] ParametersValueInfo: string }
    
        static member Blank() =
            { Id = String.Empty
              BenchmarkId = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              HasArguments = true
              HasParameters = true
              ParametersCount = 0L
              ParametersDisplayInfo = String.Empty
              ParametersFolderInfo = String.Empty
              ParametersPrintInfo = String.Empty
              ParametersValueInfo = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_host_info`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewBenchmarkHostInfo =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("benchmarkId")>] BenchmarkId: string
          [<JsonPropertyName("architecture")>] Architecture: string
          [<JsonPropertyName("configuration")>] Configuration: string
          [<JsonPropertyName("chronometerFrequency")>] ChronometerFrequency: float
          [<JsonPropertyName("chronometerResolutionNanoseconds")>] ChronometerResolutionNanoseconds: float
          [<JsonPropertyName("chronometerResolutionUnitId")>] ChronometerResolutionUnitId: string
          [<JsonPropertyName("inDocker")>] InDocker: bool
          [<JsonPropertyName("jitInfo")>] JitInfo: string
          [<JsonPropertyName("osVersion")>] OsVersion: string
          [<JsonPropertyName("runtimeVersion")>] RuntimeVersion: string
          [<JsonPropertyName("hardwareIntrinsicsShort")>] HardwareIntrinsicsShort: string
          [<JsonPropertyName("hardwareTimerKind")>] HardwareTimerKind: string
          [<JsonPropertyName("hasRyuJit")>] HasRyuJit: bool
          [<JsonPropertyName("isMonoInstalled")>] IsMonoInstalled: bool
          [<JsonPropertyName("virtualMachineHypervisor")>] VirtualMachineHypervisor: string
          [<JsonPropertyName("benchmarkDotNetVersion")>] BenchmarkDotNetVersion: string
          [<JsonPropertyName("dotNetSdkVersion")>] DotNetSdkVersion: string
          [<JsonPropertyName("gcAllocationQuantum")>] GcAllocationQuantum: int64
          [<JsonPropertyName("isConcurrentGc")>] IsConcurrentGc: bool
          [<JsonPropertyName("isServerGc")>] IsServerGc: bool
          [<JsonPropertyName("cpuMaxFrequencyHz")>] CpuMaxFrequencyHz: float option
          [<JsonPropertyName("cpuMinFrequencyHz")>] CpuMinFrequencyHz: float option
          [<JsonPropertyName("cpuNominalFrequencyHz")>] CpuNominalFrequencyHz: float option
          [<JsonPropertyName("cpuProcessorName")>] CpuProcessorName: string
          [<JsonPropertyName("cpuLogicalCoreCount")>] CpuLogicalCoreCount: int64 option
          [<JsonPropertyName("cpuPhysicalCoreCount")>] CpuPhysicalCoreCount: int64 option
          [<JsonPropertyName("cpuPhysicalProcessorCount")>] CpuPhysicalProcessorCount: int64 option }
    
        static member Blank() =
            { Id = String.Empty
              BenchmarkId = String.Empty
              Architecture = String.Empty
              Configuration = String.Empty
              ChronometerFrequency = 0.
              ChronometerResolutionNanoseconds = 0.
              ChronometerResolutionUnitId = String.Empty
              InDocker = true
              JitInfo = String.Empty
              OsVersion = String.Empty
              RuntimeVersion = String.Empty
              HardwareIntrinsicsShort = String.Empty
              HardwareTimerKind = String.Empty
              HasRyuJit = true
              IsMonoInstalled = true
              VirtualMachineHypervisor = String.Empty
              BenchmarkDotNetVersion = String.Empty
              DotNetSdkVersion = String.Empty
              GcAllocationQuantum = 0L
              IsConcurrentGc = true
              IsServerGc = true
              CpuMaxFrequencyHz = None
              CpuMinFrequencyHz = None
              CpuNominalFrequencyHz = None
              CpuProcessorName = String.Empty
              CpuLogicalCoreCount = None
              CpuPhysicalCoreCount = None
              CpuPhysicalProcessorCount = None }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_host_info_antivirus_installations`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewBenchmarkHostInfoAntivirusInstallations =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("hostInfoId")>] HostInfoId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("path")>] Path: string }
    
        static member Blank() =
            { Id = String.Empty
              HostInfoId = String.Empty
              Name = String.Empty
              Path = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_jobs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewBenchmarkJobs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("jobDisplayId")>] JobDisplayId: string
          [<JsonPropertyName("displayInfo")>] DisplayInfo: string
          [<JsonPropertyName("folderInfo")>] FolderInfo: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("resolveId")>] ResolveId: string }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              Frozen = true
              JobDisplayId = String.Empty
              DisplayInfo = String.Empty
              FolderInfo = String.Empty
              HasChanges = true
              ResolveId = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `benchmark_reports`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewBenchmarkReports =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("success")>] Success: bool
          [<JsonPropertyName("gcStatsGen0Collections")>] GcStatsGen0Collections: int64
          [<JsonPropertyName("gcStatsGen1Collections")>] GcStatsGen1Collections: int64
          [<JsonPropertyName("gcStatsGen2Collections")>] GcStatsGen2Collections: int64
          [<JsonPropertyName("gcStatsTotalOperations")>] GcStatsTotalOperations: int64
          [<JsonPropertyName("gcStatsTotalAllocatedBytes")>] GcStatsTotalAllocatedBytes: int64 option
          [<JsonPropertyName("gcStatsBytesAllocatedPerOperation")>] GcStatsBytesAllocatedPerOperation: int64 option
          [<JsonPropertyName("resultsStatsKurtosis")>] ResultsStatsKurtosis: float
          [<JsonPropertyName("resultsStatsMax")>] ResultsStatsMax: float
          [<JsonPropertyName("resultsStatsMean")>] ResultsStatsMean: float
          [<JsonPropertyName("resultsStatsMedian")>] ResultsStatsMedian: float
          [<JsonPropertyName("resultsStatsN")>] ResultsStatsN: int64
          [<JsonPropertyName("resultsStatsQ1")>] ResultsStatsQ1: float
          [<JsonPropertyName("resultsStatsQ3")>] ResultsStatsQ3: float
          [<JsonPropertyName("resultsStatsSkewness")>] ResultsStatsSkewness: float
          [<JsonPropertyName("resultsStatsVariance")>] ResultsStatsVariance: float
          [<JsonPropertyName("resultsStatsInterquartileRange")>] ResultsStatsInterquartileRange: float
          [<JsonPropertyName("resultsStatsLowerFence")>] ResultsStatsLowerFence: float
          [<JsonPropertyName("resultsStatsStandardDeviation")>] ResultsStatsStandardDeviation: float
          [<JsonPropertyName("resultsStatsStandardError")>] ResultsStatsStandardError: float
          [<JsonPropertyName("resultsStatsUpperFence")>] ResultsStatsUpperFence: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalLevel")>] ResultsStatsConfidenceIntervalLevel: string
          [<JsonPropertyName("resultsStatsConfidenceIntervalLower")>] ResultsStatsConfidenceIntervalLower: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalMargin")>] ResultsStatsConfidenceIntervalMargin: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalMean")>] ResultsStatsConfidenceIntervalMean: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalN")>] ResultsStatsConfidenceIntervalN: int64
          [<JsonPropertyName("resultsStatsConfidenceIntervalUpper")>] ResultsStatsConfidenceIntervalUpper: float
          [<JsonPropertyName("resultsStatsConfidenceIntervalStandardError")>] ResultsStatsConfidenceIntervalStandardError: float
          [<JsonPropertyName("resultsStatsPercentilesP0")>] ResultsStatsPercentilesP0: float
          [<JsonPropertyName("resultsStatsPercentilesP25")>] ResultsStatsPercentilesP25: float
          [<JsonPropertyName("resultsStatsPercentilesP50")>] ResultsStatsPercentilesP50: float
          [<JsonPropertyName("resultsStatsPercentilesP67")>] ResultsStatsPercentilesP67: float
          [<JsonPropertyName("resultsStatsPercentilesP80")>] ResultsStatsPercentilesP80: float
          [<JsonPropertyName("resultsStatsPercentilesP85")>] ResultsStatsPercentilesP85: float
          [<JsonPropertyName("resultsStatsPercentilesP90")>] ResultsStatsPercentilesP90: float
          [<JsonPropertyName("resultsStatsPercentilesP95")>] ResultsStatsPercentilesP95: float
          [<JsonPropertyName("resultsStatsPercentilesP100")>] ResultsStatsPercentilesP100: float }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              Success = true
              GcStatsGen0Collections = 0L
              GcStatsGen1Collections = 0L
              GcStatsGen2Collections = 0L
              GcStatsTotalOperations = 0L
              GcStatsTotalAllocatedBytes = None
              GcStatsBytesAllocatedPerOperation = None
              ResultsStatsKurtosis = 0.
              ResultsStatsMax = 0.
              ResultsStatsMean = 0.
              ResultsStatsMedian = 0.
              ResultsStatsN = 0L
              ResultsStatsQ1 = 0.
              ResultsStatsQ3 = 0.
              ResultsStatsSkewness = 0.
              ResultsStatsVariance = 0.
              ResultsStatsInterquartileRange = 0.
              ResultsStatsLowerFence = 0.
              ResultsStatsStandardDeviation = 0.
              ResultsStatsStandardError = 0.
              ResultsStatsUpperFence = 0.
              ResultsStatsConfidenceIntervalLevel = String.Empty
              ResultsStatsConfidenceIntervalLower = 0.
              ResultsStatsConfidenceIntervalMargin = 0.
              ResultsStatsConfidenceIntervalMean = 0.
              ResultsStatsConfidenceIntervalN = 0L
              ResultsStatsConfidenceIntervalUpper = 0.
              ResultsStatsConfidenceIntervalStandardError = 0.
              ResultsStatsPercentilesP0 = 0.
              ResultsStatsPercentilesP25 = 0.
              ResultsStatsPercentilesP50 = 0.
              ResultsStatsPercentilesP67 = 0.
              ResultsStatsPercentilesP80 = 0.
              ResultsStatsPercentilesP85 = 0.
              ResultsStatsPercentilesP90 = 0.
              ResultsStatsPercentilesP95 = 0.
              ResultsStatsPercentilesP100 = 0. }
    
    /// <summary>
    /// A record representing a new row in the table `benchmarks`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewBenchmark =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("sourceId")>] SourceId: string
          [<JsonPropertyName("title")>] Title: string
          [<JsonPropertyName("allRuntimes")>] AllRuntimes: string
          [<JsonPropertyName("totalTime")>] TotalTime: string
          [<JsonPropertyName("isMultipleRuntimes")>] IsMultipleRuntimes: bool
          [<JsonPropertyName("logFilePath")>] LogFilePath: string
          [<JsonPropertyName("resultsDirectoryPath")>] ResultsDirectoryPath: string
          [<JsonPropertyName("hasCriticalValidationErrors")>] HasCriticalValidationErrors: bool }
    
        static member Blank() =
            { Id = String.Empty
              SourceId = String.Empty
              Title = String.Empty
              AllRuntimes = String.Empty
              TotalTime = String.Empty
              IsMultipleRuntimes = true
              LogFilePath = String.Empty
              ResultsDirectoryPath = String.Empty
              HasCriticalValidationErrors = true }
    
    /// <summary>
    /// A record representing a new row in the table `build_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewBuildArtifacts =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("buildResultId")>] BuildResultId: string
          [<JsonPropertyName("path")>] Path: string }
    
        static member Blank() =
            { Id = String.Empty
              BuildResultId = String.Empty
              Path = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `build_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewBuildResults =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("errorMessage")>] ErrorMessage: string option
          [<JsonPropertyName("isBuildSuccess")>] IsBuildSuccess: bool
          [<JsonPropertyName("isGenerateSuccess")>] IsGenerateSuccess: bool
          [<JsonPropertyName("executablePath")>] ExecutablePath: string
          [<JsonPropertyName("programName")>] ProgramName: string
          [<JsonPropertyName("appConfigPath")>] AppConfigPath: string option
          [<JsonPropertyName("binariesDirectoryPath")>] BinariesDirectoryPath: string option
          [<JsonPropertyName("intermediateDirectoryPath")>] IntermediateDirectoryPath: string option
          [<JsonPropertyName("packageDirectoryName")>] PackageDirectoryName: string option
          [<JsonPropertyName("programCodePath")>] ProgramCodePath: string option
          [<JsonPropertyName("projectFilePath")>] ProjectFilePath: string option
          [<JsonPropertyName("buildArtifactsDirectoryPath")>] BuildArtifactsDirectoryPath: string option
          [<JsonPropertyName("buildScriptFilePath")>] BuildScriptFilePath: string option
          [<JsonPropertyName("nugetConfigPath")>] NugetConfigPath: string option
          [<JsonPropertyName("rootArtifactsFolderPath")>] RootArtifactsFolderPath: string option }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              ErrorMessage = None
              IsBuildSuccess = true
              IsGenerateSuccess = true
              ExecutablePath = String.Empty
              ProgramName = String.Empty
              AppConfigPath = None
              BinariesDirectoryPath = None
              IntermediateDirectoryPath = None
              PackageDirectoryName = None
              ProgramCodePath = None
              ProjectFilePath = None
              BuildArtifactsDirectoryPath = None
              BuildScriptFilePath = None
              NugetConfigPath = None
              RootArtifactsFolderPath = None }
    
    /// <summary>
    /// A record representing a new row in the table `environment_gcs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewEnvironmentGcs =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("concurrent")>] Concurrent: bool
          [<JsonPropertyName("force")>] Force: bool
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("gcDisplayId")>] GcDisplayId: string
          [<JsonPropertyName("server")>] Server: bool
          [<JsonPropertyName("cpuGroups")>] CpuGroups: bool
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("heapCount")>] HeapCount: int64
          [<JsonPropertyName("noAffinitize")>] NoAffinitize: bool
          [<JsonPropertyName("retainVm")>] RetainVm: bool
          [<JsonPropertyName("heapAffinitizeMask")>] HeapAffinitizeMask: int64
          [<JsonPropertyName("allowVeryLargeObjects")>] AllowVeryLargeObjects: bool }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentId = String.Empty
              Concurrent = true
              Force = true
              Frozen = true
              GcDisplayId = String.Empty
              Server = true
              CpuGroups = true
              HasChanges = true
              HeapCount = 0L
              NoAffinitize = true
              RetainVm = true
              HeapAffinitizeMask = 0L
              AllowVeryLargeObjects = true }
    
    /// <summary>
    /// A record representing a new row in the table `environment_runtimes`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewEnvironmentRuntimes =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentId")>] EnvironmentId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("runtimeMoniker")>] RuntimeMoniker: string
          [<JsonPropertyName("msBuildMoniker")>] MsBuildMoniker: string
          [<JsonPropertyName("isAot")>] IsAot: bool }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentId = String.Empty
              Name = String.Empty
              RuntimeMoniker = String.Empty
              MsBuildMoniker = String.Empty
              IsAot = true }
    
    /// <summary>
    /// A record representing a new row in the table `environmental_variables`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewEnvironmentalVariables =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("environmentalId")>] EnvironmentalId: string
          [<JsonPropertyName("variableKey")>] VariableKey: string
          [<JsonPropertyName("variableValue")>] VariableValue: string }
    
        static member Blank() =
            { Id = String.Empty
              EnvironmentalId = String.Empty
              VariableKey = String.Empty
              VariableValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `execution_result_errors`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewExecutionResultErrors =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("error")>] Error: string }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              Error = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `execution_result_items`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewExecutionResultItems =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("value")>] Value: string }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              Value = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `execution_result_measurements`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewExecutionResultMeasurements =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("nanoseconds")>] Nanoseconds: float
          [<JsonPropertyName("operations")>] Operations: int64
          [<JsonPropertyName("iterationIndex")>] IterationIndex: int64
          [<JsonPropertyName("iterationMode")>] IterationMode: string
          [<JsonPropertyName("iterationStage")>] IterationStage: string
          [<JsonPropertyName("launchIndex")>] LaunchIndex: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              Nanoseconds = 0.
              Operations = 0L
              IterationIndex = 0L
              IterationMode = String.Empty
              IterationStage = String.Empty
              LaunchIndex = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `execution_result_prefixed_lines`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewExecutionResultPrefixedLines =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("prefixedLine")>] PrefixedLine: string }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              PrefixedLine = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `execution_result_standard_output_lines`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewExecutionResultStandardOutputLines =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("executionResultId")>] ExecutionResultId: string
          [<JsonPropertyName("line")>] Line: string }
    
        static member Blank() =
            { Id = String.Empty
              ExecutionResultId = String.Empty
              Line = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `execution_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewExecutionResults =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("exitCode")>] ExitCode: int64 option
          [<JsonPropertyName("isSuccess")>] IsSuccess: bool
          [<JsonPropertyName("processId")>] ProcessId: int64 option }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              ExitCode = None
              IsSuccess = true
              ProcessId = None }
    
    /// <summary>
    /// A record representing a new row in the table `generate_artifacts`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewGenerateArtifacts =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("generateResultId")>] GenerateResultId: string
          [<JsonPropertyName("path")>] Path: string }
    
        static member Blank() =
            { Id = String.Empty
              GenerateResultId = String.Empty
              Path = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `generate_results`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewGenerateResults =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("isGenerateSuccess")>] IsGenerateSuccess: bool
          [<JsonPropertyName("executablePath")>] ExecutablePath: string
          [<JsonPropertyName("programName")>] ProgramName: string
          [<JsonPropertyName("appConfigPath")>] AppConfigPath: string option
          [<JsonPropertyName("binariesDirectoryPath")>] BinariesDirectoryPath: string option
          [<JsonPropertyName("intermediateDirectoryPath")>] IntermediateDirectoryPath: string option
          [<JsonPropertyName("packagesDirectoryName")>] PackagesDirectoryName: string option
          [<JsonPropertyName("programCodePath")>] ProgramCodePath: string option
          [<JsonPropertyName("projectFilePath")>] ProjectFilePath: string option
          [<JsonPropertyName("buildArtifactsDirectoryPath")>] BuildArtifactsDirectoryPath: string option
          [<JsonPropertyName("buildScriptFilePath")>] BuildScriptFilePath: string option
          [<JsonPropertyName("nugetConfigPath")>] NugetConfigPath: string option
          [<JsonPropertyName("rootArtifactsFolderPath")>] RootArtifactsFolderPath: string option }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              IsGenerateSuccess = true
              ExecutablePath = String.Empty
              ProgramName = String.Empty
              AppConfigPath = None
              BinariesDirectoryPath = None
              IntermediateDirectoryPath = None
              PackagesDirectoryName = None
              ProgramCodePath = None
              ProjectFilePath = None
              BuildArtifactsDirectoryPath = None
              BuildScriptFilePath = None
              NugetConfigPath = None
              RootArtifactsFolderPath = None }
    
    /// <summary>
    /// A record representing a new row in the table `infrastructure_arguments`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewInfrastructureArguments =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("infrastructureId")>] InfrastructureId: string
          [<JsonPropertyName("textRepresentation")>] TextRepresentation: string }
    
        static member Blank() =
            { Id = String.Empty
              InfrastructureId = String.Empty
              TextRepresentation = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `infrastructure_nuget_references`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewInfrastructureNugetReferences =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("infrastructureId")>] InfrastructureId: string
          [<JsonPropertyName("prerelease")>] Prerelease: bool
          [<JsonPropertyName("packageName")>] PackageName: string
          [<JsonPropertyName("packageSource")>] PackageSource: string
          [<JsonPropertyName("packageVersion")>] PackageVersion: string }
    
        static member Blank() =
            { Id = String.Empty
              InfrastructureId = String.Empty
              Prerelease = true
              PackageName = String.Empty
              PackageSource = String.Empty
              PackageVersion = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `job_accuracy`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewJobAccuracy =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("evaluateOverhead")>] EvaluateOverhead: bool
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("outlierMode")>] OutlierMode: string
          [<JsonPropertyName("analyzeLaunchVariance")>] AnalyzeLaunchVariance: bool
          [<JsonPropertyName("maxAbsoluteErrorNanoseconds")>] MaxAbsoluteErrorNanoseconds: float
          [<JsonPropertyName("maxAbsoluteErrorUnitId")>] MaxAbsoluteErrorUnitId: string
          [<JsonPropertyName("maxRelativeError")>] MaxRelativeError: float
          [<JsonPropertyName("minInvokeCount")>] MinInvokeCount: int64
          [<JsonPropertyName("minIterationItemNanoseconds")>] MinIterationItemNanoseconds: float
          [<JsonPropertyName("minIterationTimeUnitId")>] MinIterationTimeUnitId: string }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Frozen = true
              EvaluateOverhead = true
              HasChanges = true
              OutlierMode = String.Empty
              AnalyzeLaunchVariance = true
              MaxAbsoluteErrorNanoseconds = 0.
              MaxAbsoluteErrorUnitId = String.Empty
              MaxRelativeError = 0.
              MinInvokeCount = 0L
              MinIterationItemNanoseconds = 0.
              MinIterationTimeUnitId = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `job_environments`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewJobEnvironments =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("affinity")>] Affinity: int64
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("environmentDisplayId")>] EnvironmentDisplayId: string
          [<JsonPropertyName("jit")>] Jit: string
          [<JsonPropertyName("platform")>] Platform: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("largeAddressAware")>] LargeAddressAware: bool
          [<JsonPropertyName("powerPlanMode")>] PowerPlanMode: string option }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Affinity = 0L
              Frozen = true
              EnvironmentDisplayId = String.Empty
              Jit = String.Empty
              Platform = String.Empty
              HasChanges = true
              LargeAddressAware = true
              PowerPlanMode = None }
    
    /// <summary>
    /// A record representing a new row in the table `job_infrastructures`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewJobInfrastructures =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("clockFrequencyHz")>] ClockFrequencyHz: float option
          [<JsonPropertyName("clockTitle")>] ClockTitle: string option
          [<JsonPropertyName("clockIsAvailable")>] ClockIsAvailable: bool option
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("infrastructureDisplayId")>] InfrastructureDisplayId: string
          [<JsonPropertyName("toolchainName")>] ToolchainName: string
          [<JsonPropertyName("toolchainIsInProcess")>] ToolchainIsInProcess: bool
          [<JsonPropertyName("buildConfiguration")>] BuildConfiguration: string option
          [<JsonPropertyName("hasChanges")>] HasChanges: bool }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              ClockFrequencyHz = None
              ClockTitle = None
              ClockIsAvailable = None
              Frozen = true
              InfrastructureDisplayId = String.Empty
              ToolchainName = String.Empty
              ToolchainIsInProcess = true
              BuildConfiguration = None
              HasChanges = true }
    
    /// <summary>
    /// A record representing a new row in the table `job_meta`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewJobMeta =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("baseline")>] Baseline: bool
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("metaDisplayId")>] MetaDisplayId: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("isDefault")>] IsDefault: bool
          [<JsonPropertyName("isMutator")>] IsMutator: bool }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Baseline = true
              Frozen = true
              MetaDisplayId = String.Empty
              HasChanges = true
              IsDefault = true
              IsMutator = true }
    
    /// <summary>
    /// A record representing a new row in the table `job_runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewJobRuns =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("jobId")>] JobId: string
          [<JsonPropertyName("frozen")>] Frozen: bool
          [<JsonPropertyName("runDisplayId")>] RunDisplayId: string
          [<JsonPropertyName("hasChanges")>] HasChanges: bool
          [<JsonPropertyName("invocationCount")>] InvocationCount: int64
          [<JsonPropertyName("iterationCount")>] IterationCount: int64
          [<JsonPropertyName("iterationTimeNanoseconds")>] IterationTimeNanoseconds: float
          [<JsonPropertyName("iterationTimeUnitId")>] IterationTimeUnitId: string
          [<JsonPropertyName("launchCount")>] LaunchCount: int64
          [<JsonPropertyName("memoryRandomization")>] MemoryRandomization: bool
          [<JsonPropertyName("runStrategy")>] RunStrategy: string
          [<JsonPropertyName("unrollFactor")>] UnrollFactor: int64
          [<JsonPropertyName("warmupCount")>] WarmupCount: int64
          [<JsonPropertyName("maxIterationCount")>] MaxIterationCount: int64
          [<JsonPropertyName("minIterationCount")>] MinIterationCount: int64
          [<JsonPropertyName("maxWarmupIterationCount")>] MaxWarmupIterationCount: int64
          [<JsonPropertyName("minWarmupIterationCount")>] MinWarmupIterationCount: int64 }
    
        static member Blank() =
            { Id = String.Empty
              JobId = String.Empty
              Frozen = true
              RunDisplayId = String.Empty
              HasChanges = true
              InvocationCount = 0L
              IterationCount = 0L
              IterationTimeNanoseconds = 0.
              IterationTimeUnitId = String.Empty
              LaunchCount = 0L
              MemoryRandomization = true
              RunStrategy = String.Empty
              UnrollFactor = 0L
              WarmupCount = 0L
              MaxIterationCount = 0L
              MinIterationCount = 0L
              MaxWarmupIterationCount = 0L
              MinWarmupIterationCount = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `method_info`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewMethodInfo =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `report_measurements`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewReportMeasurements =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("nanoseconds")>] Nanoseconds: float
          [<JsonPropertyName("operations")>] Operations: int64
          [<JsonPropertyName("iterationIndex")>] IterationIndex: int64
          [<JsonPropertyName("iterationMode")>] IterationMode: string
          [<JsonPropertyName("iterationStage")>] IterationStage: string
          [<JsonPropertyName("launchIndex")>] LaunchIndex: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              Nanoseconds = 0.
              Operations = 0L
              IterationIndex = 0L
              IterationMode = String.Empty
              IterationStage = String.Empty
              LaunchIndex = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `report_metrics`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewReportMetrics =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("metricKey")>] MetricKey: string
          [<JsonPropertyName("metricValue")>] MetricValue: decimal
          [<JsonPropertyName("metricId")>] MetricId: string
          [<JsonPropertyName("legend")>] Legend: string
          [<JsonPropertyName("unit")>] Unit: string option
          [<JsonPropertyName("displayName")>] DisplayName: string option
          [<JsonPropertyName("numberFormat")>] NumberFormat: string option
          [<JsonPropertyName("unitType")>] UnitType: string
          [<JsonPropertyName("priorityInCategory")>] PriorityInCategory: int64
          [<JsonPropertyName("theGreaterTheBetter")>] TheGreaterTheBetter: int64 }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              MetricKey = String.Empty
              MetricValue = 0m
              MetricId = String.Empty
              Legend = String.Empty
              Unit = None
              DisplayName = None
              NumberFormat = None
              UnitType = String.Empty
              PriorityInCategory = 0L
              TheGreaterTheBetter = 0L }
    
    /// <summary>
    /// A record representing a new row in the table `report_original_values`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewReportOriginalValues =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("reportId")>] ReportId: string
          [<JsonPropertyName("resultValue")>] ResultValue: float
          [<JsonPropertyName("isUpperOutlier")>] IsUpperOutlier: bool
          [<JsonPropertyName("isLowerOutlier")>] IsLowerOutlier: bool }
    
        static member Blank() =
            { Id = String.Empty
              ReportId = String.Empty
              ResultValue = 0.
              IsUpperOutlier = true
              IsLowerOutlier = true }
    
    /// <summary>
    /// A record representing a new row in the table `resource_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewResourceMetadataItem =
        { [<JsonPropertyName("resourceId")>] ResourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { ResourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `resources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewResource =
        { [<JsonPropertyName("id")>] Id: string option
          [<JsonPropertyName("runId")>] RunId: string option
          [<JsonPropertyName("name")>] Name: string option
          [<JsonPropertyName("resourceType")>] ResourceType: string
          [<JsonPropertyName("resourceBlob")>] ResourceBlob: BlobField
          [<JsonPropertyName("hash")>] Hash: string
          [<JsonPropertyName("createdOn")>] CreatedOn: DateTime }
    
        static member Blank() =
            { Id = None
              RunId = None
              Name = None
              ResourceType = String.Empty
              ResourceBlob = BlobField.Empty()
              Hash = String.Empty
              CreatedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `run_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewRunMetadataItem =
        { [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { RunId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `runs`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewRuns =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("description")>] Description: string
          [<JsonPropertyName("startedOn")>] StartedOn: DateTime }
    
        static member Blank() =
            { Id = String.Empty
              Name = String.Empty
              Description = String.Empty
              StartedOn = DateTime.UtcNow }
    
    /// <summary>
    /// A record representing a new row in the table `source_metadata`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewSourceMetadataItem =
        { [<JsonPropertyName("sourceId")>] SourceId: string
          [<JsonPropertyName("itemKey")>] ItemKey: string
          [<JsonPropertyName("itemValue")>] ItemValue: string }
    
        static member Blank() =
            { SourceId = String.Empty
              ItemKey = String.Empty
              ItemValue = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `sources`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewSource =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("runId")>] RunId: string
          [<JsonPropertyName("name")>] Name: string
          [<JsonPropertyName("sourceType")>] SourceType: string }
    
        static member Blank() =
            { Id = String.Empty
              RunId = String.Empty
              Name = String.Empty
              SourceType = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `units`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewUnits =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("abbreviation")>] Abbreviation: string
          [<JsonPropertyName("abbreviationAscii")>] AbbreviationAscii: string
          [<JsonPropertyName("baseUnits")>] BaseUnits: int64
          [<JsonPropertyName("fullName")>] FullName: string }
    
        static member Blank() =
            { Id = String.Empty
              Abbreviation = String.Empty
              AbbreviationAscii = String.Empty
              BaseUnits = 0L
              FullName = String.Empty }
    
    /// <summary>
    /// A record representing a new row in the table `validation_error`.
    /// </summary>
    /// <remarks>
    /// This record was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    type NewValidationError =
        { [<JsonPropertyName("id")>] Id: string
          [<JsonPropertyName("caseId")>] CaseId: string
          [<JsonPropertyName("message")>] Message: string
          [<JsonPropertyName("isCritical")>] IsCritical: bool }
    
        static member Blank() =
            { Id = String.Empty
              CaseId = String.Empty
              Message = String.Empty
              IsCritical = true }
    
/// Module generated on 23/10/2024 19:56:14 (utc) via Freql.Tools.
[<RequireQualifiedAccess>]
module Operations =

    let buildSql (lines: string list) = lines |> String.concat Environment.NewLine

    /// <summary>
    /// Select a `Records.ArtifactMetadataItem` from the table `artifact_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ArtifactMetadataItem&gt;` and uses Records.ArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ArtifactMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ArtifactMetadataItem&gt;` and uses Records.ArtifactMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ArtifactMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ArtifactMetadataItem>(sql, parameters)
    
    let insertArtifactMetadataItem (context: SqliteContext) (parameters: Parameters.NewArtifactMetadataItem) =
        context.Insert("artifact_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Artifact` from the table `artifacts`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Artifact>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Artifact&gt;` and uses Records.Artifact.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectArtifactRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectArtifactRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Artifact.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Artifact>(sql, parameters)
    
    let insertArtifact (context: SqliteContext) (parameters: Parameters.NewArtifact) =
        context.Insert("artifacts", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkCaseDescriptors` from the table `benchmark_case_descriptors`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkCaseDescriptors&gt;` and uses Records.BenchmarkCaseDescriptors.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkCaseDescriptorsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkCaseDescriptorsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkCaseDescriptors.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkCaseDescriptors>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkCaseDescriptors&gt;` and uses Records.BenchmarkCaseDescriptors.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkCaseDescriptorsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkCaseDescriptorsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkCaseDescriptors.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkCaseDescriptors>(sql, parameters)
    
    let insertBenchmarkCaseDescriptors (context: SqliteContext) (parameters: Parameters.NewBenchmarkCaseDescriptors) =
        context.Insert("benchmark_case_descriptors", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkCases` from the table `benchmark_cases`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkCases&gt;` and uses Records.BenchmarkCases.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkCasesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkCasesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkCases.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkCases>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkCases&gt;` and uses Records.BenchmarkCases.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkCasesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkCasesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkCases.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkCases>(sql, parameters)
    
    let insertBenchmarkCases (context: SqliteContext) (parameters: Parameters.NewBenchmarkCases) =
        context.Insert("benchmark_cases", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkHostInfo` from the table `benchmark_host_info`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkHostInfo&gt;` and uses Records.BenchmarkHostInfo.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkHostInfoRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkHostInfoRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkHostInfo.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkHostInfo>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkHostInfo&gt;` and uses Records.BenchmarkHostInfo.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkHostInfoRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkHostInfoRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkHostInfo.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkHostInfo>(sql, parameters)
    
    let insertBenchmarkHostInfo (context: SqliteContext) (parameters: Parameters.NewBenchmarkHostInfo) =
        context.Insert("benchmark_host_info", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkHostInfoAntivirusInstallations` from the table `benchmark_host_info_antivirus_installations`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkHostInfoAntivirusInstallations&gt;` and uses Records.BenchmarkHostInfoAntivirusInstallations.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkHostInfoAntivirusInstallationsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkHostInfoAntivirusInstallationsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkHostInfoAntivirusInstallations.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkHostInfoAntivirusInstallations>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkHostInfoAntivirusInstallations&gt;` and uses Records.BenchmarkHostInfoAntivirusInstallations.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkHostInfoAntivirusInstallationsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkHostInfoAntivirusInstallationsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkHostInfoAntivirusInstallations.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkHostInfoAntivirusInstallations>(sql, parameters)
    
    let insertBenchmarkHostInfoAntivirusInstallations (context: SqliteContext) (parameters: Parameters.NewBenchmarkHostInfoAntivirusInstallations) =
        context.Insert("benchmark_host_info_antivirus_installations", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkJobs` from the table `benchmark_jobs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkJobs&gt;` and uses Records.BenchmarkJobs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkJobsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkJobsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkJobs.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkJobs>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkJobs&gt;` and uses Records.BenchmarkJobs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkJobsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkJobsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkJobs.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkJobs>(sql, parameters)
    
    let insertBenchmarkJobs (context: SqliteContext) (parameters: Parameters.NewBenchmarkJobs) =
        context.Insert("benchmark_jobs", parameters)
    
    /// <summary>
    /// Select a `Records.BenchmarkReports` from the table `benchmark_reports`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BenchmarkReports&gt;` and uses Records.BenchmarkReports.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkReportsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkReportsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkReports.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BenchmarkReports>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BenchmarkReports&gt;` and uses Records.BenchmarkReports.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkReportsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkReportsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BenchmarkReports.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BenchmarkReports>(sql, parameters)
    
    let insertBenchmarkReports (context: SqliteContext) (parameters: Parameters.NewBenchmarkReports) =
        context.Insert("benchmark_reports", parameters)
    
    /// <summary>
    /// Select a `Records.Benchmark` from the table `benchmarks`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Benchmark&gt;` and uses Records.Benchmark.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Benchmark.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Benchmark>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Benchmark&gt;` and uses Records.Benchmark.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBenchmarkRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBenchmarkRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Benchmark.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Benchmark>(sql, parameters)
    
    let insertBenchmark (context: SqliteContext) (parameters: Parameters.NewBenchmark) =
        context.Insert("benchmarks", parameters)
    
    /// <summary>
    /// Select a `Records.BuildArtifacts` from the table `build_artifacts`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BuildArtifacts&gt;` and uses Records.BuildArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBuildArtifactsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBuildArtifactsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BuildArtifacts.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BuildArtifacts>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BuildArtifacts&gt;` and uses Records.BuildArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBuildArtifactsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBuildArtifactsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BuildArtifacts.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BuildArtifacts>(sql, parameters)
    
    let insertBuildArtifacts (context: SqliteContext) (parameters: Parameters.NewBuildArtifacts) =
        context.Insert("build_artifacts", parameters)
    
    /// <summary>
    /// Select a `Records.BuildResults` from the table `build_results`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.BuildResults&gt;` and uses Records.BuildResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBuildResultsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBuildResultsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BuildResults.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.BuildResults>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.BuildResults&gt;` and uses Records.BuildResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectBuildResultsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectBuildResultsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.BuildResults.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.BuildResults>(sql, parameters)
    
    let insertBuildResults (context: SqliteContext) (parameters: Parameters.NewBuildResults) =
        context.Insert("build_results", parameters)
    
    /// <summary>
    /// Select a `Records.EnvironmentGcs` from the table `environment_gcs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EnvironmentGcs&gt;` and uses Records.EnvironmentGcs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentGcsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentGcsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentGcs.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EnvironmentGcs>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EnvironmentGcs&gt;` and uses Records.EnvironmentGcs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentGcsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentGcsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentGcs.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EnvironmentGcs>(sql, parameters)
    
    let insertEnvironmentGcs (context: SqliteContext) (parameters: Parameters.NewEnvironmentGcs) =
        context.Insert("environment_gcs", parameters)
    
    /// <summary>
    /// Select a `Records.EnvironmentRuntimes` from the table `environment_runtimes`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EnvironmentRuntimes&gt;` and uses Records.EnvironmentRuntimes.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentRuntimesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentRuntimesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentRuntimes.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EnvironmentRuntimes>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EnvironmentRuntimes&gt;` and uses Records.EnvironmentRuntimes.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentRuntimesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentRuntimesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentRuntimes.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EnvironmentRuntimes>(sql, parameters)
    
    let insertEnvironmentRuntimes (context: SqliteContext) (parameters: Parameters.NewEnvironmentRuntimes) =
        context.Insert("environment_runtimes", parameters)
    
    /// <summary>
    /// Select a `Records.EnvironmentalVariables` from the table `environmental_variables`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.EnvironmentalVariables&gt;` and uses Records.EnvironmentalVariables.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentalVariablesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentalVariablesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentalVariables.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.EnvironmentalVariables>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.EnvironmentalVariables&gt;` and uses Records.EnvironmentalVariables.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectEnvironmentalVariablesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectEnvironmentalVariablesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.EnvironmentalVariables.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.EnvironmentalVariables>(sql, parameters)
    
    let insertEnvironmentalVariables (context: SqliteContext) (parameters: Parameters.NewEnvironmentalVariables) =
        context.Insert("environmental_variables", parameters)
    
    /// <summary>
    /// Select a `Records.ExecutionResultErrors` from the table `execution_result_errors`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ExecutionResultErrors&gt;` and uses Records.ExecutionResultErrors.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultErrorsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultErrorsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultErrors.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ExecutionResultErrors>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ExecutionResultErrors&gt;` and uses Records.ExecutionResultErrors.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultErrorsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultErrorsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultErrors.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ExecutionResultErrors>(sql, parameters)
    
    let insertExecutionResultErrors (context: SqliteContext) (parameters: Parameters.NewExecutionResultErrors) =
        context.Insert("execution_result_errors", parameters)
    
    /// <summary>
    /// Select a `Records.ExecutionResultItems` from the table `execution_result_items`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ExecutionResultItems&gt;` and uses Records.ExecutionResultItems.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultItemsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultItemsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultItems.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ExecutionResultItems>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ExecutionResultItems&gt;` and uses Records.ExecutionResultItems.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultItemsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultItemsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultItems.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ExecutionResultItems>(sql, parameters)
    
    let insertExecutionResultItems (context: SqliteContext) (parameters: Parameters.NewExecutionResultItems) =
        context.Insert("execution_result_items", parameters)
    
    /// <summary>
    /// Select a `Records.ExecutionResultMeasurements` from the table `execution_result_measurements`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ExecutionResultMeasurements&gt;` and uses Records.ExecutionResultMeasurements.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultMeasurementsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultMeasurementsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultMeasurements.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ExecutionResultMeasurements>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ExecutionResultMeasurements&gt;` and uses Records.ExecutionResultMeasurements.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultMeasurementsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultMeasurementsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultMeasurements.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ExecutionResultMeasurements>(sql, parameters)
    
    let insertExecutionResultMeasurements (context: SqliteContext) (parameters: Parameters.NewExecutionResultMeasurements) =
        context.Insert("execution_result_measurements", parameters)
    
    /// <summary>
    /// Select a `Records.ExecutionResultPrefixedLines` from the table `execution_result_prefixed_lines`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ExecutionResultPrefixedLines&gt;` and uses Records.ExecutionResultPrefixedLines.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultPrefixedLinesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultPrefixedLinesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultPrefixedLines.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ExecutionResultPrefixedLines>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ExecutionResultPrefixedLines&gt;` and uses Records.ExecutionResultPrefixedLines.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultPrefixedLinesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultPrefixedLinesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultPrefixedLines.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ExecutionResultPrefixedLines>(sql, parameters)
    
    let insertExecutionResultPrefixedLines (context: SqliteContext) (parameters: Parameters.NewExecutionResultPrefixedLines) =
        context.Insert("execution_result_prefixed_lines", parameters)
    
    /// <summary>
    /// Select a `Records.ExecutionResultStandardOutputLines` from the table `execution_result_standard_output_lines`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ExecutionResultStandardOutputLines&gt;` and uses Records.ExecutionResultStandardOutputLines.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultStandardOutputLinesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultStandardOutputLinesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultStandardOutputLines.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ExecutionResultStandardOutputLines>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ExecutionResultStandardOutputLines&gt;` and uses Records.ExecutionResultStandardOutputLines.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultStandardOutputLinesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultStandardOutputLinesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResultStandardOutputLines.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ExecutionResultStandardOutputLines>(sql, parameters)
    
    let insertExecutionResultStandardOutputLines (context: SqliteContext) (parameters: Parameters.NewExecutionResultStandardOutputLines) =
        context.Insert("execution_result_standard_output_lines", parameters)
    
    /// <summary>
    /// Select a `Records.ExecutionResults` from the table `execution_results`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ExecutionResults&gt;` and uses Records.ExecutionResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResults.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ExecutionResults>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ExecutionResults&gt;` and uses Records.ExecutionResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectExecutionResultsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectExecutionResultsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ExecutionResults.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ExecutionResults>(sql, parameters)
    
    let insertExecutionResults (context: SqliteContext) (parameters: Parameters.NewExecutionResults) =
        context.Insert("execution_results", parameters)
    
    /// <summary>
    /// Select a `Records.GenerateArtifacts` from the table `generate_artifacts`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.GenerateArtifacts&gt;` and uses Records.GenerateArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectGenerateArtifactsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectGenerateArtifactsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.GenerateArtifacts.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.GenerateArtifacts>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.GenerateArtifacts&gt;` and uses Records.GenerateArtifacts.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectGenerateArtifactsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectGenerateArtifactsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.GenerateArtifacts.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.GenerateArtifacts>(sql, parameters)
    
    let insertGenerateArtifacts (context: SqliteContext) (parameters: Parameters.NewGenerateArtifacts) =
        context.Insert("generate_artifacts", parameters)
    
    /// <summary>
    /// Select a `Records.GenerateResults` from the table `generate_results`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.GenerateResults&gt;` and uses Records.GenerateResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectGenerateResultsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectGenerateResultsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.GenerateResults.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.GenerateResults>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.GenerateResults&gt;` and uses Records.GenerateResults.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectGenerateResultsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectGenerateResultsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.GenerateResults.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.GenerateResults>(sql, parameters)
    
    let insertGenerateResults (context: SqliteContext) (parameters: Parameters.NewGenerateResults) =
        context.Insert("generate_results", parameters)
    
    /// <summary>
    /// Select a `Records.InfrastructureArguments` from the table `infrastructure_arguments`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.InfrastructureArguments&gt;` and uses Records.InfrastructureArguments.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectInfrastructureArgumentsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectInfrastructureArgumentsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.InfrastructureArguments.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.InfrastructureArguments>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.InfrastructureArguments&gt;` and uses Records.InfrastructureArguments.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectInfrastructureArgumentsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectInfrastructureArgumentsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.InfrastructureArguments.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.InfrastructureArguments>(sql, parameters)
    
    let insertInfrastructureArguments (context: SqliteContext) (parameters: Parameters.NewInfrastructureArguments) =
        context.Insert("infrastructure_arguments", parameters)
    
    /// <summary>
    /// Select a `Records.InfrastructureNugetReferences` from the table `infrastructure_nuget_references`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.InfrastructureNugetReferences&gt;` and uses Records.InfrastructureNugetReferences.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectInfrastructureNugetReferencesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectInfrastructureNugetReferencesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.InfrastructureNugetReferences.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.InfrastructureNugetReferences>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.InfrastructureNugetReferences&gt;` and uses Records.InfrastructureNugetReferences.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectInfrastructureNugetReferencesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectInfrastructureNugetReferencesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.InfrastructureNugetReferences.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.InfrastructureNugetReferences>(sql, parameters)
    
    let insertInfrastructureNugetReferences (context: SqliteContext) (parameters: Parameters.NewInfrastructureNugetReferences) =
        context.Insert("infrastructure_nuget_references", parameters)
    
    /// <summary>
    /// Select a `Records.JobAccuracy` from the table `job_accuracy`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.JobAccuracy&gt;` and uses Records.JobAccuracy.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobAccuracyRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobAccuracyRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobAccuracy.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.JobAccuracy>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.JobAccuracy&gt;` and uses Records.JobAccuracy.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobAccuracyRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobAccuracyRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobAccuracy.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.JobAccuracy>(sql, parameters)
    
    let insertJobAccuracy (context: SqliteContext) (parameters: Parameters.NewJobAccuracy) =
        context.Insert("job_accuracy", parameters)
    
    /// <summary>
    /// Select a `Records.JobEnvironments` from the table `job_environments`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.JobEnvironments&gt;` and uses Records.JobEnvironments.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobEnvironmentsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobEnvironmentsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobEnvironments.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.JobEnvironments>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.JobEnvironments&gt;` and uses Records.JobEnvironments.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobEnvironmentsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobEnvironmentsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobEnvironments.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.JobEnvironments>(sql, parameters)
    
    let insertJobEnvironments (context: SqliteContext) (parameters: Parameters.NewJobEnvironments) =
        context.Insert("job_environments", parameters)
    
    /// <summary>
    /// Select a `Records.JobInfrastructures` from the table `job_infrastructures`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.JobInfrastructures&gt;` and uses Records.JobInfrastructures.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobInfrastructuresRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobInfrastructuresRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobInfrastructures.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.JobInfrastructures>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.JobInfrastructures&gt;` and uses Records.JobInfrastructures.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobInfrastructuresRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobInfrastructuresRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobInfrastructures.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.JobInfrastructures>(sql, parameters)
    
    let insertJobInfrastructures (context: SqliteContext) (parameters: Parameters.NewJobInfrastructures) =
        context.Insert("job_infrastructures", parameters)
    
    /// <summary>
    /// Select a `Records.JobMeta` from the table `job_meta`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.JobMeta&gt;` and uses Records.JobMeta.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobMetaRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobMetaRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobMeta.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.JobMeta>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.JobMeta&gt;` and uses Records.JobMeta.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobMetaRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobMetaRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobMeta.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.JobMeta>(sql, parameters)
    
    let insertJobMeta (context: SqliteContext) (parameters: Parameters.NewJobMeta) =
        context.Insert("job_meta", parameters)
    
    /// <summary>
    /// Select a `Records.JobRuns` from the table `job_runs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.JobRuns&gt;` and uses Records.JobRuns.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobRunsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobRunsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobRuns.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.JobRuns>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.JobRuns&gt;` and uses Records.JobRuns.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectJobRunsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectJobRunsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.JobRuns.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.JobRuns>(sql, parameters)
    
    let insertJobRuns (context: SqliteContext) (parameters: Parameters.NewJobRuns) =
        context.Insert("job_runs", parameters)
    
    /// <summary>
    /// Select a `Records.MethodInfo` from the table `method_info`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.MethodInfo&gt;` and uses Records.MethodInfo.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectMethodInfoRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectMethodInfoRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MethodInfo.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.MethodInfo>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.MethodInfo&gt;` and uses Records.MethodInfo.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectMethodInfoRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectMethodInfoRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.MethodInfo.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.MethodInfo>(sql, parameters)
    
    let insertMethodInfo (context: SqliteContext) (parameters: Parameters.NewMethodInfo) =
        context.Insert("method_info", parameters)
    
    /// <summary>
    /// Select a `Records.ReportMeasurements` from the table `report_measurements`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ReportMeasurements&gt;` and uses Records.ReportMeasurements.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectReportMeasurementsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectReportMeasurementsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ReportMeasurements.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ReportMeasurements>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ReportMeasurements&gt;` and uses Records.ReportMeasurements.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectReportMeasurementsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectReportMeasurementsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ReportMeasurements.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ReportMeasurements>(sql, parameters)
    
    let insertReportMeasurements (context: SqliteContext) (parameters: Parameters.NewReportMeasurements) =
        context.Insert("report_measurements", parameters)
    
    /// <summary>
    /// Select a `Records.ReportMetrics` from the table `report_metrics`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ReportMetrics&gt;` and uses Records.ReportMetrics.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectReportMetricsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectReportMetricsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ReportMetrics.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ReportMetrics>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ReportMetrics&gt;` and uses Records.ReportMetrics.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectReportMetricsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectReportMetricsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ReportMetrics.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ReportMetrics>(sql, parameters)
    
    let insertReportMetrics (context: SqliteContext) (parameters: Parameters.NewReportMetrics) =
        context.Insert("report_metrics", parameters)
    
    /// <summary>
    /// Select a `Records.ReportOriginalValues` from the table `report_original_values`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ReportOriginalValues&gt;` and uses Records.ReportOriginalValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectReportOriginalValuesRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectReportOriginalValuesRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ReportOriginalValues.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ReportOriginalValues>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ReportOriginalValues&gt;` and uses Records.ReportOriginalValues.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectReportOriginalValuesRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectReportOriginalValuesRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ReportOriginalValues.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ReportOriginalValues>(sql, parameters)
    
    let insertReportOriginalValues (context: SqliteContext) (parameters: Parameters.NewReportOriginalValues) =
        context.Insert("report_original_values", parameters)
    
    /// <summary>
    /// Select a `Records.ResourceMetadataItem` from the table `resource_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ResourceMetadataItem&gt;` and uses Records.ResourceMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ResourceMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ResourceMetadataItem&gt;` and uses Records.ResourceMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ResourceMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ResourceMetadataItem>(sql, parameters)
    
    let insertResourceMetadataItem (context: SqliteContext) (parameters: Parameters.NewResourceMetadataItem) =
        context.Insert("resource_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Resource` from the table `resources`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Resource&gt;` and uses Records.Resource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Resource.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Resource>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Resource&gt;` and uses Records.Resource.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectResourceRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectResourceRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Resource.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Resource>(sql, parameters)
    
    let insertResource (context: SqliteContext) (parameters: Parameters.NewResource) =
        context.Insert("resources", parameters)
    
    /// <summary>
    /// Select a `Records.RunMetadataItem` from the table `run_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.RunMetadataItem&gt;` and uses Records.RunMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectRunMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectRunMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.RunMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.RunMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.RunMetadataItem&gt;` and uses Records.RunMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectRunMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectRunMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.RunMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.RunMetadataItem>(sql, parameters)
    
    let insertRunMetadataItem (context: SqliteContext) (parameters: Parameters.NewRunMetadataItem) =
        context.Insert("run_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Runs` from the table `runs`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Runs&gt;` and uses Records.Runs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectRunsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectRunsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Runs.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Runs>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Runs&gt;` and uses Records.Runs.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectRunsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectRunsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Runs.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Runs>(sql, parameters)
    
    let insertRuns (context: SqliteContext) (parameters: Parameters.NewRuns) =
        context.Insert("runs", parameters)
    
    /// <summary>
    /// Select a `Records.SourceMetadataItem` from the table `source_metadata`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.SourceMetadataItem&gt;` and uses Records.SourceMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectSourceMetadataItemRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectSourceMetadataItemRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.SourceMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.SourceMetadataItem>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.SourceMetadataItem&gt;` and uses Records.SourceMetadataItem.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectSourceMetadataItemRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectSourceMetadataItemRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.SourceMetadataItem.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.SourceMetadataItem>(sql, parameters)
    
    let insertSourceMetadataItem (context: SqliteContext) (parameters: Parameters.NewSourceMetadataItem) =
        context.Insert("source_metadata", parameters)
    
    /// <summary>
    /// Select a `Records.Source` from the table `sources`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Source&gt;` and uses Records.Source.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectSourceRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectSourceRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Source.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Source>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Source&gt;` and uses Records.Source.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectSourceRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectSourceRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Source.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Source>(sql, parameters)
    
    let insertSource (context: SqliteContext) (parameters: Parameters.NewSource) =
        context.Insert("sources", parameters)
    
    /// <summary>
    /// Select a `Records.Units` from the table `units`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.Units&gt;` and uses Records.Units.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUnitsRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUnitsRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Units.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.Units>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.Units&gt;` and uses Records.Units.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectUnitsRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectUnitsRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.Units.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.Units>(sql, parameters)
    
    let insertUnits (context: SqliteContext) (parameters: Parameters.NewUnits) =
        context.Insert("units", parameters)
    
    /// <summary>
    /// Select a `Records.ValidationError` from the table `validation_error`.
    /// Internally this calls `context.SelectSingleAnon&lt;Records.ValidationError&gt;` and uses Records.ValidationError.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectValidationErrorRecord ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectValidationErrorRecord (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ValidationError.SelectSql() ] @ query |> buildSql
        context.SelectSingleAnon<Records.ValidationError>(sql, parameters)
    
    /// <summary>
    /// Internally this calls `context.SelectAnon&lt;Records.ValidationError&gt;` and uses Records.ValidationError.SelectSql().
    /// The caller can provide extra string lines to create a query and boxed parameters.
    /// It is up to the caller to verify the sql and parameters are correct,
    /// this should be considered an internal function (not exposed in public APIs).
    /// Parameters are assigned names based on their order in 0 indexed array. For example: @0,@1,@2...
    /// </summary>
    /// <remarks>
    /// This function was generated via Freql.Tools on 23/10/2024 19:56:14
    /// </remarks>
    /// <example>
    /// <code>
    /// let result = selectValidationErrorRecords ctx "WHERE `field` = @0" [ box `value` ]
    /// </code>
    /// </example>
    let selectValidationErrorRecords (context: SqliteContext) (query: string list) (parameters: obj list) =
        let sql = [ Records.ValidationError.SelectSql() ] @ query |> buildSql
        context.SelectAnon<Records.ValidationError>(sql, parameters)
    
    let insertValidationError (context: SqliteContext) (parameters: Parameters.NewValidationError) =
        context.Insert("validation_error", parameters)
    
[<RequireQualifiedAccess>]
module Initialization =
    let sql (checkIfExists: bool) =
        [ Records.Runs.InitializationSql checkIfExists
          Records.Source.InitializationSql checkIfExists
          Records.Benchmark.InitializationSql checkIfExists
          Records.BenchmarkCases.InitializationSql checkIfExists
          Records.BenchmarkJobs.InitializationSql checkIfExists
          Records.BenchmarkReports.InitializationSql checkIfExists
          Records.Units.InitializationSql checkIfExists
          Records.Resource.InitializationSql checkIfExists
          Records.JobInfrastructures.InitializationSql checkIfExists
          Records.GenerateResults.InitializationSql checkIfExists
          Records.ExecutionResults.InitializationSql checkIfExists
          Records.JobEnvironments.InitializationSql checkIfExists
          Records.BuildResults.InitializationSql checkIfExists
          Records.BenchmarkHostInfo.InitializationSql checkIfExists
          Records.MethodInfo.InitializationSql checkIfExists
          Records.Artifact.InitializationSql checkIfExists
          Records.ValidationError.InitializationSql checkIfExists
          Records.SourceMetadataItem.InitializationSql checkIfExists
          Records.RunMetadataItem.InitializationSql checkIfExists
          Records.ResourceMetadataItem.InitializationSql checkIfExists
          Records.ReportOriginalValues.InitializationSql checkIfExists
          Records.ReportMetrics.InitializationSql checkIfExists
          Records.ReportMeasurements.InitializationSql checkIfExists
          Records.JobRuns.InitializationSql checkIfExists
          Records.JobMeta.InitializationSql checkIfExists
          Records.JobAccuracy.InitializationSql checkIfExists
          Records.InfrastructureNugetReferences.InitializationSql checkIfExists
          Records.InfrastructureArguments.InitializationSql checkIfExists
          Records.GenerateArtifacts.InitializationSql checkIfExists
          Records.ExecutionResultStandardOutputLines.InitializationSql checkIfExists
          Records.ExecutionResultPrefixedLines.InitializationSql checkIfExists
          Records.ExecutionResultMeasurements.InitializationSql checkIfExists
          Records.ExecutionResultItems.InitializationSql checkIfExists
          Records.ExecutionResultErrors.InitializationSql checkIfExists
          Records.EnvironmentalVariables.InitializationSql checkIfExists
          Records.EnvironmentRuntimes.InitializationSql checkIfExists
          Records.EnvironmentGcs.InitializationSql checkIfExists
          Records.BuildArtifacts.InitializationSql checkIfExists
          Records.BenchmarkHostInfoAntivirusInstallations.InitializationSql checkIfExists
          Records.BenchmarkCaseDescriptors.InitializationSql checkIfExists
          Records.ArtifactMetadataItem.InitializationSql checkIfExists ]
        |> List.concat

    let run (checkIfExists: bool) (ctx: SqliteContext) =
        sql checkIfExists |> List.iter (ctx.ExecuteSqlNonQuery >> ignore)

    let runInTransaction (checkIfExists: bool) (ctx: SqliteContext) =
        ctx.ExecuteInTransaction(fun t -> sql checkIfExists |> List.iter (t.ExecuteSqlNonQuery >> ignore))
